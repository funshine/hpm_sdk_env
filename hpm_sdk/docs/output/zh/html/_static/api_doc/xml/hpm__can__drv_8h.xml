<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hpm__can__drv_8h" kind="file" language="C++">
    <compoundname>hpm_can_drv.h</compoundname>
    <includes refid="hpm__common_8h" local="yes">hpm_common.h</includes>
    <includes local="yes">hpm_can_regs.h</includes>
    <includes local="yes">hpm_soc_feature.h</includes>
    <includedby refid="hpm__can__drv_8c" local="yes">drivers/src/hpm_can_drv.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>hpm_soc_feature.h</label>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_can_drv.h</label>
        <link refid="hpm__can__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>hpm_can_regs.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>drivers/src/hpm_can_drv.c</label>
        <link refid="hpm__can__drv_8c"/>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_can_drv.h</label>
        <link refid="hpm__can__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcan__bit__timing__param__t" prot="public">can_bit_timing_param_t</innerclass>
    <innerclass refid="structcan__filter__config__t" prot="public">can_filter_config_t</innerclass>
    <innerclass refid="structcan__config__t" prot="public">can_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__can__interface_1ga45004900abaec268c5921b69da8c2887" prot="public" static="no">
        <name>CAN_EVENT_RECEIVE</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1ac22e3ca639fa49f8839f3b290039e0c6" kindref="member">CAN_RTIF_RIF_MASK</ref>)</initializer>
        <briefdescription>
<para>CAN Event definitions. </para>
        </briefdescription>
        <detaileddescription>
<para>CAN Receive event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="48" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gadddd2de4254d97c0661aa68e3b65f5b9" prot="public" static="no">
        <name>CAN_EVENT_RX_BUF_OVERRUN</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1aee46abaaa553234f7a1b05dd4646c9bf" kindref="member">CAN_RTIF_ROIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN RX buffer overrun event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="49" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gab269cb173bef923b1034ffca72d917cd" prot="public" static="no">
        <name>CAN_EVENT_RX_BUF_FULL</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1a196e127aed700385753f34bbecb4d884" kindref="member">CAN_RTIF_RFIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN RX buffer full event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="50" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gab133777fcb21ebacf88e2c5a0599d90b" prot="public" static="no">
        <name>CAN_EVENT_RX_BUF_ALMOST_FULL</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1a89f9c5ac0f817949d575503f63145cab" kindref="member">CAN_RTIF_RAFIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN RX buffer almost full event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="51" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga36e97c1be186b5a75158413c9b83a03f" prot="public" static="no">
        <name>CAN_EVENT_TX_PRIMARY_BUF</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1ac9bafce6c399f676b19362124d854253" kindref="member">CAN_RTIF_TPIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN TX primary buffer event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="52" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gadce5e0b22e7fea05d914df345c4064d0" prot="public" static="no">
        <name>CAN_EVENT_TX_SECONDARY_BUF</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1acaa6345bc629b3cea898189bf0daf87a" kindref="member">CAN_RTIF_TSIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN TX secondary buffer event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="53" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga49527ad60df35216eb68581e55b5f1ad" prot="public" static="no">
        <name>CAN_EVENT_ERROR</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1abb06038140bdf1237235cb4e7728edef" kindref="member">CAN_RTIF_EIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN error event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="54" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga10cf0ca55b49dcd8b6d36f2841ed0186" prot="public" static="no">
        <name>CAN_EVENT_ABORT</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1a53529ff4a3585cfb20a10614b1c77d2b" kindref="member">CAN_RTIF_AIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN abort event </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="55" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gabac161adbf7014034259484d94dada78" prot="public" static="no">
        <name>CAN_STB_IS_EMPTY</name>
        <initializer>(0U)</initializer>
        <briefdescription>
<para>CAN Secondary Transmit buffer Status. </para>
        </briefdescription>
        <detaileddescription>
<para>CAN Secondary Transmit buffer is empty </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="60" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga9c82d54d07460fcd04b058e3bd443823" prot="public" static="no">
        <name>CAN_STB_LESS_EQUAL_HALF_FULL</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Secondary Transmit buffer &lt;= 1/2 * FULL </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="61" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gaf8b4612501a0582068c54890b79b0c80" prot="public" static="no">
        <name>CAN_STB_MORE_THAN_HALF_FULL</name>
        <initializer>(2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Secondary Transmit buffer &gt; 1/2 * FULL </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="62" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gadbcad1bc10c1b20bc669c6cad6f0e0c8" prot="public" static="no">
        <name>CAN_STB_IS_FULL</name>
        <initializer>(3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Secondary Transmit buffer is full </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="63" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga31ccdcf915e018404ef95f6eb1285398" prot="public" static="no">
        <name>CAN_RXBUF_IS_EMPTY</name>
        <initializer>(0U)</initializer>
        <briefdescription>
<para>CAN Receive Buffer States. </para>
        </briefdescription>
        <detaileddescription>
<para>CAN Receive buffer is empty </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="68" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga41040bd96b02a36221dd0e07357fb8b4" prot="public" static="no">
        <name>CAN_RXBUF_HAS_DATA</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Receive buffer has data </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="69" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gaa32eec42bee70c9ffe7533b0d261952f" prot="public" static="no">
        <name>CAN_RXBUF_ALMOST_FULL</name>
        <initializer>(2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Receive buffer is almost full </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="70" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga53eea02ce7f65e6c6fe10f93d28aaebb" prot="public" static="no">
        <name>CAN_RXBUF_IS_FULL</name>
        <initializer>(3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Receive buffer is full </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="71" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga826fb80a9cb2519389e3d240916f4aa8" prot="public" static="no">
        <name>CAN_ERROR_WARNING_LIMIT_FLAG</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1ad6ec23a0dcab1e96792b3a2dc6785c15" kindref="member">CAN_ERRINT_EWARN_MASK</ref>)</initializer>
        <briefdescription>
<para>CAN Error interrupts/flags. </para>
        </briefdescription>
        <detaileddescription>
<para>CAN Error Limit reached </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="77" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga49eacceb89aaf21fbc6bcc82bb43f900" prot="public" static="no">
        <name>CAN_ERROR_PASSIVE_MODE_ACTIVE_FLAG</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1ae59798db6e5497f6690d65b5b03251c9" kindref="member">CAN_ERRINT_EPASS_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Passive mode active </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="78" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga7711abcc1bd4f24605a7dde3d050d383" prot="public" static="no">
        <name>CAN_ERROR_PASSIVE_INT_ENABLE</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1a938bbd34038047d47b6089cc2d1616bd" kindref="member">CAN_ERRINT_EPIE_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Passive Interrupt Enable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="79" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga9463e8494da893fc524c11a3ddc874bf" prot="public" static="no">
        <name>CAN_ERROR_PASSIVE_INT_FLAG</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1a93c1d0d42bb8b25712a743f3822d78b1" kindref="member">CAN_ERRINT_EPIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Passive Interrupt Flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="80" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga99d87ea7842cd8048b282d5c1894eb16" prot="public" static="no">
        <name>CAN_ERROR_ARBITRATION_LOST_INT_ENABLE</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1af050e97adfeba0687a693cf66cd46f6d" kindref="member">CAN_ERRINT_ALIE_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN Arbitration Lost Interrupt Enable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="81" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga8e3507f80810b115b23def9f75f069bd" prot="public" static="no">
        <name>CAN_ERROR_ARBITRATION_LOST_INT_FLAG</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1af050e97adfeba0687a693cf66cd46f6d" kindref="member">CAN_ERRINT_ALIE_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN arbitration Lost Interrupt Flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="82" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gad9b4a37700a584948b82c44f896c18df" prot="public" static="no">
        <name>CAN_ERROR_BUS_ERROR_INT_ENABLE</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1a85fc0f385cd3ed395f34f75a14ca0652" kindref="member">CAN_ERRINT_BEIE_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN BUS error Interrupt Enable </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="83" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gaaf6de434d010d4ebe013a0ae1882c1da" prot="public" static="no">
        <name>CAN_ERROR_BUS_ERROR_INT_FLAG</name>
        <initializer>(<ref refid="HPM6700_2ip_2hpm__can__regs_8h_1a5ac2a1de9786742c141005b48377c6ed" kindref="member">CAN_ERRINT_BEIF_MASK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CAN BUS error Interrupt flag </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="84" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga46e012eee9f7ee0e7da17b95e6283802" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_NO_ERROR</name>
        <initializer>(0U)</initializer>
        <briefdescription>
<para>CAN Error Kinds. </para>
        </briefdescription>
        <detaileddescription>
<para>No error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="90" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga9a2c4773cca5be1fe436745454de514c" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_BIT_ERROR</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bit error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="91" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga4ceea60be8e37c35ed578a74e681ec45" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_FORM_ERROR</name>
        <initializer>(2U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Form error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="92" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga9f09020f9f5a3ae1416bdb9757d68b42" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_STUFF_ERROR</name>
        <initializer>(3U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stuff error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="93" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga70ab31920bdfe51ae4a86d3e55029f3a" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_ACK_ERROR</name>
        <initializer>(4U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Acknowledgment error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="94" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga9442a06e746e173590307f1fe69c2535" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_CRC_ERROR</name>
        <initializer>(5U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CRC error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="95" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1ga85288ce8739e201312d3d7cd3dcbcb7a" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_OTHER_ERROR</name>
        <initializer>(6U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Other errors </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="96" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__can__interface_1gaf0964b203588ef81387c902be12bfa4f" prot="public" static="no">
        <name>CAN_KIND_OF_ERROR_BUS_OFF</name>
        <initializer>(7U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>BUS off error </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="97" column="9" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__can__interface_1ga06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bae96b1ac882763cb4c8d2451495b6e164" prot="public">
          <name>status_can_bit_error</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 0 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN bit error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba43ff40f92c5cb0da19f05968992852b7" prot="public">
          <name>status_can_form_error</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 1 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN Form error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba9ed82093c1bb95538000027c70570623" prot="public">
          <name>status_can_stuff_error</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 2 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN stuff error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba78e42513c60026fc263a8801caf05f29" prot="public">
          <name>status_can_ack_error</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 3 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN ACK error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba361fa2997079c1f25b046e63d44be5ee" prot="public">
          <name>status_can_crc_error</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 4 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN CRC error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bafdd5a9663f667ae265e7546de2440e9e" prot="public">
          <name>status_can_other_error</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 5 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN other error </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55baa220d5bd47aa8b734b151015496e93c2" prot="public">
          <name>status_can_tx_fifo_full</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 6 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN TX fifo full </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba6077b3bdf357687fa33f2b7f27fd6b05" prot="public">
          <name>status_can_filter_index_invalid</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 7 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN filter index is invalid </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bac0d5ba8473773f14d321b14e16c8631f" prot="public">
          <name>status_can_filter_num_invalid</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 8 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>CAN filter number is invalid </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55babeeddfad79514084285efc9faa28a769" prot="public">
          <name>status_can_invalid_bit_timing</name>
          <initializer>= ((uint32_t)( status_group_can )*1000U + (uint32_t)( 9 ))</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Invalid CAN bit timing parameter </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CAN error codes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="32" column="1" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="32" bodyend="43"/>
      </memberdef>
      <memberdef kind="enum" id="group__can__interface_1gadf764cbdea00d65edcd07bb9953ad2b7" prot="public" static="no" strong="no">
        <type></type>
        <name>@1</name>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7af28e46e53eb21b4aca04e23ee366cfdf" prot="public">
          <name>can_payload_size_0</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 0 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a7ed3d475850172634efd7d4207bea421" prot="public">
          <name>can_payload_size_1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a59e88bd1de784788fcf3ffe563bfee24" prot="public">
          <name>can_payload_size_2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae1c9a2c883e56564ac1a5b47947482e4" prot="public">
          <name>can_payload_size_3</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 3 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a294b840e944b3989e687ad25228e9219" prot="public">
          <name>can_payload_size_4</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 4 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a676fc9d6d28fd42ed6164017af5dd11d" prot="public">
          <name>can_payload_size_5</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 5 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7add2a67966e03f6e376aab337481c8d2f" prot="public">
          <name>can_payload_size_6</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 6 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae0952cd9017dd54fc3cc237d35f4b0f8" prot="public">
          <name>can_payload_size_7</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 7 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a1fd9ac23c0a1c70732b9cd16f840ea44" prot="public">
          <name>can_payload_size_8</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 8 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7af3efce552949dcf79e46b9e82e19d970" prot="public">
          <name>can_payload_size_12</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 12 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a8d460591395d51862e2202f59b3a619c" prot="public">
          <name>can_payload_size_16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 16 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a64eaeca350b8d1a37400abd89d3dc52f" prot="public">
          <name>can_payload_size_20</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 20 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a74991244c51e449819a26e4e79ef29ec" prot="public">
          <name>can_payload_size_24</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 24 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a13cc8368ae15618a9f7b227c05270fe3" prot="public">
          <name>can_payload_size_32</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 32 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a4a246cd64d7852b3e70956df040fc7ed" prot="public">
          <name>can_payload_size_48</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 48 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a4f54e842aff31ef877394d929fcdd4da" prot="public">
          <name>can_payload_size_64</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Payload size is 64 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae25ee666c07bd147f6a811cd798cfc8c" prot="public">
          <name>can_payload_size_max</name>
          <initializer>= can_payload_size_64</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CAN DLC definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="121" column="1" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="121" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__can__interface_1ga52f54c24e8e9ae0e017b12e3d561ce2d" prot="public" static="no">
        <type>enum _can_mode</type>
        <definition>typedef enum _can_mode can_node_mode_t</definition>
        <argsstring></argsstring>
        <name>can_node_mode_t</name>
        <briefdescription>
<para>CAN loopback types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="107" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1ga262601289513f1abac3f06d2f55bc624" prot="public" static="no">
        <type>enum _can_bit_timing_option</type>
        <definition>typedef enum _can_bit_timing_option can_bit_timing_option_t</definition>
        <argsstring></argsstring>
        <name>can_bit_timing_option_t</name>
        <briefdescription>
<para>CAN bit timing options. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="116" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1gaead5fa76fd408804e2cd0828a2fe6ecc" prot="public" static="no">
        <type>union _can_rx_buf</type>
        <definition>typedef union _can_rx_buf can_receive_buf_t</definition>
        <argsstring></argsstring>
        <name>can_receive_buf_t</name>
        <briefdescription>
<para>CAN receive buffer data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="175" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" prot="public" static="no">
        <type>union _can_tx_buf</type>
        <definition>typedef union _can_tx_buf can_transmit_buf_t</definition>
        <argsstring></argsstring>
        <name>can_transmit_buf_t</name>
        <briefdescription>
<para>CAN transmit buffer data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="198" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__can__interface_1gafb42b10b1f2a2ca45872da968340a0a4" prot="public" static="no">
        <type>enum _can_filter_id_mode</type>
        <definition>typedef enum _can_filter_id_mode can_filter_id_mode_t</definition>
        <argsstring></argsstring>
        <name>can_filter_id_mode_t</name>
        <briefdescription>
<para>CAN acceptance filter modes. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="207" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__can__interface_1gab6e2a05f695556c4b536c204d124f7f9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_reset</definition>
        <argsstring>(CAN_Type *base, bool enable)</argsstring>
        <name>can_reset</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Reset CAN controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>reset flag for CAN controller <itemizedlist>
<listitem><para>true reset the CAN controller </para>
</listitem>
<listitem><para>false clear the CAN controller reset flag </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="274" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="274" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga0c6069b848881509e94d03531cb9523e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_force_bus_off</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_force_bus_off</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Force CAN controller to Bus-off mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="287" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga0546791b59326060a6572a93cbcd4fc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_node_mode</definition>
        <argsstring>(CAN_Type *base, can_node_mode_t mode)</argsstring>
        <name>can_set_node_mode</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1ga52f54c24e8e9ae0e017b12e3d561ce2d" kindref="member">can_node_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set CAN mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN loopback mode <itemizedlist>
<listitem><para>can_mode_normal Normal work mode </para>
</listitem>
<listitem><para>can_mode_loopback_internal internal loopback mode </para>
</listitem>
<listitem><para>can_mode_loopback_external external loopback mode </para>
</listitem>
<listitem><para>can_mode_listen_only CAN listen-only mode </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="302" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="302" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga0a0de02da597aa142c8f2c635451af8b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_enable_listen_only_mode</definition>
        <argsstring>(CAN_Type *base, bool enable)</argsstring>
        <name>can_enable_listen_only_mode</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable CAN listen-only mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN listen-only mode enable flag <itemizedlist>
<listitem><para>true enable listen-only mode </para>
</listitem>
<listitem><para>false disable listen-only mode </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="324" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="324" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga4dcb0a0b43beca63626c1bd70d233229" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_enter_standby_mode</definition>
        <argsstring>(CAN_Type *base, bool enable)</argsstring>
        <name>can_enter_standby_mode</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enter CAN standby mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Can standby mode enable flag <itemizedlist>
<listitem><para>true enable standby mode </para>
</listitem>
<listitem><para>false disable standby mode </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="340" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="340" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga435ea033e91254b240a3d2692c593f5f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_disable_ptb_retransmission</definition>
        <argsstring>(CAN_Type *base, bool enable)</argsstring>
        <name>can_disable_ptb_retransmission</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Disable the re-transmission for the primary transmission buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag for disabling re-transmission for PTB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="355" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="355" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gadd77ad7b290d49d4c8111cb64e183c68" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool can_is_ptb_retransmission_disabled</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_is_ptb_retransmission_disabled</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Check whether re-transmission is disabled for PTB or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Re-transmission is disabled for PTB </para>
</simplesect>
<simplesect kind="return"><para>false Re-transmission is enabled for PTB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="371" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="371" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae65f034449e099c9d1416fec6ff6f65d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_disable_stb_retransmission</definition>
        <argsstring>(CAN_Type *base, bool enable)</argsstring>
        <name>can_disable_stb_retransmission</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Disable the re-transmission for the secondary transmission buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Flag for disabling re-transmission for STB </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="382" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="382" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga9065095bbf7a3fb70dd53e84aef45bc2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool can_is_stb_retransmission_disabled</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_is_stb_retransmission_disabled</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Check whether re-transmission is disabled for STB or not. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true Re-transmission is disabled for STB </para>
</simplesect>
<simplesect kind="return"><para>false Re-transmission is enabled for STB </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="398" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="398" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gac1501582c751f8a28985a1c3c5243d1a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_select_tx_buffer</definition>
        <argsstring>(CAN_Type *base, bool select_secondary_buffer)</argsstring>
        <name>can_select_tx_buffer</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>select_secondary_buffer</declname>
        </param>
        <briefdescription>
<para>Select CAN TX buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">select_secondary_buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN secondary transmit buffer selection flag <itemizedlist>
<listitem><para>true Select the secondary transmit buffer </para>
</listitem>
<listitem><para>false Select the primary transmit buffer </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="411" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="411" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga6ccd85b582f85de46ab638c3c93722a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_start_high_priority_message_transmit</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_start_high_priority_message_transmit</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Start CAN high priority message transmit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="425" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="425" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaa24188776602337467340d570cd546b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_abort_high_priority_message_transmit</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_abort_high_priority_message_transmit</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Abort CAN high priority message transmit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="434" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga24f9342949f8ec44bd7513a75557a44a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_start_message_transmit</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_start_message_transmit</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Start CAN message transmit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="443" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="443" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga3a4320d363e5618566eb83944319b019" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_start_all_message_transmit</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_start_all_message_transmit</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Start CAN all messages transmit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="452" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae9e0bc700b3f3d645e3a1b98d83a9ddf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_abort_message_transmit</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_abort_message_transmit</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Abort CAN message transmit. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="461" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="461" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga92aa2e20006d67b433ccfe0ab501710a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_switch_to_next_tx_buffer</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_switch_to_next_tx_buffer</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Switch to next CAN tx buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="470" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="470" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gace7f0b6c493ba5dffd840fdcd96d4477" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_select_tx_buffer_priority_mode</definition>
        <argsstring>(CAN_Type *base, bool enable_priority_decision)</argsstring>
        <name>can_select_tx_buffer_priority_mode</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable_priority_decision</declname>
        </param>
        <briefdescription>
<para>Select CAN tx buffer priority mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable_priority_decision</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN tx buffer priority mode selection flag <itemizedlist>
<listitem><para>true priority decision mode </para>
</listitem>
<listitem><para>false FIFO mode </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="482" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="482" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga5de7ef8a412f0cfd68d498fca7508e85" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_secondary_transmit_buffer_status</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_secondary_transmit_buffer_status</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get CAN secondary transmit buffer status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>secondary</parametername>
</parameternamelist>
<parameterdescription>
<para>transmit buffer status, 0: empty, 1: &lt;= 1/2 full, 2: &gt; 1/2 full, 3: full </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="497" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="497" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaeb857b795d4302f0db1ba39ea79e3e6b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool can_is_primary_transmit_buffer_full</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_is_primary_transmit_buffer_full</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Check whether the primary transmit buffer is full. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true for full </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="507" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="507" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaed7d586c58e6394c87e5c9ae660b7372" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool can_is_secondary_transmit_buffer_full</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_is_secondary_transmit_buffer_full</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Check whether the secondary transmit buffer is full. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true for full </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; CAN Secondary Transmit buffer is full</para>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="517" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="517" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga1da71caefe18e0de7bec467bdc60c329" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool can_is_in_bus_off_mode</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_is_in_bus_off_mode</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Check whether the CAN is in BUS off mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true for bus off mode </para>
</simplesect>
<simplesect kind="return"><para>false for non-bus off mode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="529" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga6d8473a6062662c406d835816853640c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_enable_self_ack</definition>
        <argsstring>(CAN_Type *base, bool enable)</argsstring>
        <name>can_enable_self_ack</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable can self ack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>Self-ack enable flag, true or false </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="540" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="540" bodyend="547"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gaf4fafca8d57538f0d52b456b670003e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_receive_buffer_overflow_mode</definition>
        <argsstring>(CAN_Type *base, bool override_enable)</argsstring>
        <name>can_set_receive_buffer_overflow_mode</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>override_enable</declname>
        </param>
        <briefdescription>
<para>Set CAN receive buffer overflow mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">override_enable</parametername>
</parameternamelist>
<parameterdescription>
<para>receive buffer overflow mode option <itemizedlist>
<listitem><para>true the oldest message will be overwritten </para>
</listitem>
<listitem><para>false the new message will not be stored </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="556" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="556" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gac8d9eb5826c69dc9eb87993d579c7134" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool can_is_receive_buffer_overflow</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_is_receive_buffer_overflow</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Check whether CAN receive buffer is overflow. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>or false </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="570" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="570" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga17d145853d07de1d00ec40b335906339" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_release_receive_buffer</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_release_receive_buffer</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Release CAN receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="580" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga3ebf853b8d9bc79fa98b545b51cc4b7e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_allow_store_all_data_in_receive_buffer</definition>
        <argsstring>(CAN_Type *base, bool allow)</argsstring>
        <name>can_allow_store_all_data_in_receive_buffer</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allow</declname>
        </param>
        <briefdescription>
<para>Allow can store all date in receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">allow</parametername>
</parameternamelist>
<parameterdescription>
<para>flag to determine whether to store error data frame </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="590" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="590" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga6bf8ad2d2c3e4596cedff91910868d79" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_receive_buffer_status</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_receive_buffer_status</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get CAN receive buffer status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Receive</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer status, 0: empty, 1: &gt; empty, &lt; almost full, 2: &gt;= almost full, 3: full </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="604" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="604" bodyend="607"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae0825616300ddf36c1be07a32ddf657b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool can_is_data_available_in_receive_buffer</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_is_data_available_in_receive_buffer</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Check whether there are data available in receive buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the receive buffer is not empty </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; CAN Receive buffer is empty</para>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="614" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="614" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga84ebb3675b0698af0bd572b6dff7888c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_enable_can_fd_iso_mode</definition>
        <argsstring>(CAN_Type *base, bool enable)</argsstring>
        <name>can_enable_can_fd_iso_mode</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Enable CAN FD ISO mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN-FD ISO mode enable flag </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="625" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="625" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gacd2e45edae3c77e25a15cfd58b0e04d2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_enable_tx_rx_irq</definition>
        <argsstring>(CAN_Type *base, uint8_t mask)</argsstring>
        <name>can_enable_tx_rx_irq</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Enable CAN TX/RX interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN interrupt mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="639" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="639" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae1be4b29b7474bf9c64769daf92bb54e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_disable_tx_rx_irq</definition>
        <argsstring>(CAN_Type *base, uint8_t mask)</argsstring>
        <name>can_disable_tx_rx_irq</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Disable CAN TX/RX interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN interrupt mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="649" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga4cbc8dffa436fc2ad5f2d9bc4030f05e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_clear_tx_rx_flags</definition>
        <argsstring>(CAN_Type *base, uint8_t flags)</argsstring>
        <name>can_clear_tx_rx_flags</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Clear CAN TX/RX flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN TX/RX interrupt flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="659" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="659" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga59d881ba010799dc9447f908d05ba39a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_tx_rx_flags</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_tx_rx_flags</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get CAN TX/RX flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN</parametername>
</parameternamelist>
<parameterdescription>
<para>Tx/RX interrupt flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="670" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="670" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga883ad3561bd3d6db480fe026cd2edf3a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_enable_error_irq</definition>
        <argsstring>(CAN_Type *base, uint8_t mask)</argsstring>
        <name>can_enable_error_irq</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Enable CAN error interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN error interrupt mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="680" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="680" bodyend="683"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga65457c022f3c55f288bf37942809ccc3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_disable_error_irq</definition>
        <argsstring>(CAN_Type *base, uint8_t mask)</argsstring>
        <name>can_disable_error_irq</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Disable CAN error interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN error interrupt mask </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="691" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="691" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gac550e035dd57a57b993140291e64cd03" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_error_interrupt_flags</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_error_interrupt_flags</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get CAN error interrupt flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN</parametername>
</parameternamelist>
<parameterdescription>
<para>error interrupt flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="701" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="701" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gadd32c6836083cea5910fa6d7be98df10" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_clear_error_interrupt_flags</definition>
        <argsstring>(CAN_Type *base, uint8_t flags)</argsstring>
        <name>can_clear_error_interrupt_flags</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Get CAN clear interrupt flags. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN error interrupt flags </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="711" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="711" bodyend="715"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga86e7b4997864c184d96a25d210d68d92" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_last_error_kind</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_last_error_kind</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get last CAN error kind. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN</parametername>
</parameternamelist>
<parameterdescription>
<para>last error kind </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="722" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="722" bodyend="725"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga9df5fff463d7eefeb342e139a9b4edf5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_last_arbitration_lost_position</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_last_arbitration_lost_position</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get CAN last arbitrary lost position. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN</parametername>
</parameternamelist>
<parameterdescription>
<para>last arbitrary lost position </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="732" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="732" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gabaaf1ac9262c86fad5f3ca03c9abe63f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_transmitter_delay_compensation</definition>
        <argsstring>(CAN_Type *base, uint8_t sample_point, bool enable)</argsstring>
        <name>can_set_transmitter_delay_compensation</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>sample_point</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>Set CAN transmitter delay compensation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sample_point</parametername>
</parameternamelist>
<parameterdescription>
<para>delay compensation sample point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>delay compensation enable flag </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="744" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="744" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga2c29a479c133d9e24691dbbd79c045e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_warning_limits</definition>
        <argsstring>(CAN_Type *base, uint8_t almost_full_limit, uint8_t error_warning_limit)</argsstring>
        <name>can_set_warning_limits</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>almost_full_limit</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>error_warning_limit</declname>
        </param>
        <briefdescription>
<para>Set CAN warning limits. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">almost_full_limit</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">error_warning_limit</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="761" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga7ecdbd21447091b4a04d878674daeb14" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_receive_error_count</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_receive_error_count</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get CAN receive error count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN</parametername>
</parameternamelist>
<parameterdescription>
<para>receive error count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="771" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="771" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga619811359d4e0380e067129b76a53663" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t can_get_transmit_error_count</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_get_transmit_error_count</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>Get CAN transmit error count. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN</parametername>
</parameternamelist>
<parameterdescription>
<para>transmit error count </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="781" column="23" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="781" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga8def393aa0654c160a65da9cacaeeec3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_enable_filter</definition>
        <argsstring>(CAN_Type *base, uint32_t index)</argsstring>
        <name>can_enable_filter</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Enable a specified CAN filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN filter index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="792" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="792" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga113d609ad117311b29f09a17f4052520" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_disable_filter</definition>
        <argsstring>(CAN_Type *base, uint32_t index)</argsstring>
        <name>can_disable_filter</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Disable a specified CAN filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN filter index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="803" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="803" bodyend="806"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gabe2e41f5a36374c2864816ed68042de3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_get_default_config</definition>
        <argsstring>(can_config_t *config)</argsstring>
        <name>can_get_default_config</name>
        <param>
          <type><ref refid="structcan__config__t" kindref="compound">can_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get default CAN configuration parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN configuration structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="813" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="618" bodyend="653" declfile="drivers/inc/hpm_can_drv.h" declline="813" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga4b98f7d670a9f51da7ad27fd36ec609d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_init</definition>
        <argsstring>(CAN_Type *base, can_config_t *config, uint32_t src_clk_freq)</argsstring>
        <name>can_init</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="structcan__config__t" kindref="compound">can_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_clk_freq</declname>
        </param>
        <briefdescription>
<para>Initialize the CAN controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN configuration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_clk_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN IP source clock frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="822" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="655" bodyend="776" declfile="drivers/inc/hpm_can_drv.h" declline="822" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga5f816882c2c1001ca8381608deab446c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void can_deinit</definition>
        <argsstring>(CAN_Type *base)</argsstring>
        <name>can_deinit</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <briefdescription>
<para>De-initialize the CAN controller. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="828" column="6" bodyfile="drivers/src/hpm_can_drv.c" bodystart="778" bodyend="785" declfile="drivers/inc/hpm_can_drv.h" declline="828" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga47e798ab81b91c1d129685cd54a6c2b9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_slow_speed_timing</definition>
        <argsstring>(CAN_Type *base, const can_bit_timing_param_t *param)</argsstring>
        <name>can_set_slow_speed_timing</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Configure the Slow Speed Bit timing using low-level interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN bit timing parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="836" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="836" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga87a6964bf3e2d2ad391b626c60f79363" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void can_set_fast_speed_timing</definition>
        <argsstring>(CAN_Type *base, const can_bit_timing_param_t *param)</argsstring>
        <name>can_set_fast_speed_timing</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref> *</type>
          <declname>param</declname>
        </param>
        <briefdescription>
<para>Configure the Fast Speed Bit timing using low-level interface. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN bit timing parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="847" column="20" bodyfile="drivers/inc/hpm_can_drv.h" bodystart="847" bodyend="851"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gace01a30f4853415ffd8a46a69eef1921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_set_bit_timing</definition>
        <argsstring>(CAN_Type *base, can_bit_timing_option_t option, uint32_t src_clk_freq, uint32_t baudrate, uint16_t samplepoint_min, uint16_t samplepoint_max)</argsstring>
        <name>can_set_bit_timing</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1ga262601289513f1abac3f06d2f55bc624" kindref="member">can_bit_timing_option_t</ref></type>
          <declname>option</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>src_clk_freq</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baudrate</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>samplepoint_min</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>samplepoint_max</declname>
        </param>
        <briefdescription>
<para>Configure the CAN bit timing for CAN BUS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">option</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN bit timing option </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src_clk_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN IP source clock frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN baudrate in MHz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">samplepoint_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum Sample point, range(0-1000), samplepoint_min / 1000 will be used in calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">samplepoint_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Sample point, range(0-1000), samplepoint_max / 1000 will be used in calculation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="863" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="265" bodyend="294" declfile="drivers/inc/hpm_can_drv.h" declline="863" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga3a8c46558825c0463a50618161351de4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_calculate_bit_timing</definition>
        <argsstring>(uint32_t src_clk_freq, can_bit_timing_option_t option, uint32_t baudrate, uint16_t samplepoint_min, uint16_t samplepoint_max, can_bit_timing_param_t *timing_param)</argsstring>
        <name>can_calculate_bit_timing</name>
        <param>
          <type>uint32_t</type>
          <declname>src_clk_freq</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1ga262601289513f1abac3f06d2f55bc624" kindref="member">can_bit_timing_option_t</ref></type>
          <declname>option</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>baudrate</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>samplepoint_min</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>samplepoint_max</declname>
        </param>
        <param>
          <type><ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref> *</type>
          <declname>timing_param</declname>
        </param>
        <briefdescription>
<para>Calculate the CAN bit timing for CAN BUS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src_clk_freq</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN IP source clock frequency </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">option</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN bit timing option </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN baudrate in MHz </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">samplepoint_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Minimum Sample point, range(0-1000), samplepoint_min / 1000 will be used in calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">samplepoint_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum Sample point, range(0-1000), samplepoint_max / 1000 will be used in calculation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">timing_param</parametername>
</parameternamelist>
<parameterdescription>
<para>Calculated CAN bit timing parameter </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="878" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="169" bodyend="240" declfile="drivers/inc/hpm_can_drv.h" declline="878" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1gae03b8c0387b3a0867505f5781ae35214" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_set_filter</definition>
        <argsstring>(CAN_Type *base, const can_filter_config_t *config)</argsstring>
        <name>can_set_filter</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="structcan__filter__config__t" kindref="compound">can_filter_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configure the acceptable filter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN filter configuration </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="890" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="296" bodyend="336" declfile="drivers/inc/hpm_can_drv.h" declline="890" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga111b83df5cafa16889865acef42097a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_send_message_blocking</definition>
        <argsstring>(CAN_Type *base, const can_transmit_buf_t *message)</argsstring>
        <name>can_send_message_blocking</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send CAN message using blocking transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">message</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message to be sent out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="898" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="388" bodyend="429" declfile="drivers/inc/hpm_can_drv.h" declline="898" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga4cc3ed8404d5d0340d1d03dd9fca679c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_send_high_priority_message_blocking</definition>
        <argsstring>(CAN_Type *base, const can_transmit_buf_t *message)</argsstring>
        <name>can_send_high_priority_message_blocking</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send high-priority message using blocking transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">message</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message to be sent out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="906" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="431" bodyend="458" declfile="drivers/inc/hpm_can_drv.h" declline="906" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga3edf5cdf5a93d28aa629c2bcdac3d9f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_send_message_nonblocking</definition>
        <argsstring>(CAN_Type *base, const can_transmit_buf_t *message)</argsstring>
        <name>can_send_message_nonblocking</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send CAN message using non-blocking transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">message</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message to be sent out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="915" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="460" bodyend="484" declfile="drivers/inc/hpm_can_drv.h" declline="915" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga9a7676e94c3b7d500f85f44c93e44ae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_send_high_priority_message_nonblocking</definition>
        <argsstring>(CAN_Type *base, const can_transmit_buf_t *message)</argsstring>
        <name>can_send_high_priority_message_nonblocking</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const <ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Send high-priority message using non-blocking transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">message</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message to be sent out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>API</parametername>
</parameternamelist>
<parameterdescription>
<para>execution status, status_success or status_invalid_argument </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="923" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="486" bodyend="508" declfile="drivers/inc/hpm_can_drv.h" declline="923" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga152ceffef9b26071634f3910426156f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_receive_message_blocking</definition>
        <argsstring>(CAN_Type *base, can_receive_buf_t *message)</argsstring>
        <name>can_receive_message_blocking</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1gaead5fa76fd408804e2cd0828a2fe6ecc" kindref="member">can_receive_buf_t</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Receive CAN message using blocking transfer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">message</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>API execution is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_bit_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN bit error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_form_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN form error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_stuff_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN stuff error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_ack_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN ack error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_crc_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN crc error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_other_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error happened during receiving message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="940" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="510" bodyend="564" declfile="drivers/inc/hpm_can_drv.h" declline="940" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__can__interface_1ga064b9c32ea5252b72e35f7bc6b31a4bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t can_read_received_message</definition>
        <argsstring>(CAN_Type *base, can_receive_buf_t *message)</argsstring>
        <name>can_read_received_message</name>
        <param>
          <type><ref refid="structCAN__Type" kindref="compound">CAN_Type</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="group__can__interface_1gaead5fa76fd408804e2cd0828a2fe6ecc" kindref="member">can_receive_buf_t</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Read Received CAN message. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This API assumes that the received CAN message is available. It can be used in the interrupt handler </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">message</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN message buffer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>API execution is successful </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>Invalid parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_bit_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN bit error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_form_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN form error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_stuff_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN stuff error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_ack_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN ack error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_crc_error</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN crc error happened during receiving message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_can_other_error</parametername>
</parameternamelist>
<parameterdescription>
<para>Other error happened during receiving message </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_can_drv.h" line="960" column="12" bodyfile="drivers/src/hpm_can_drv.c" bodystart="566" bodyend="616" declfile="drivers/inc/hpm_can_drv.h" declline="960" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021-2024<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_CAN_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_CAN_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__common_8h" kindref="compound">hpm_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_can_regs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_soc_feature.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">/***********************************************************************************************************************</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>Definitions</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>**********************************************************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="33" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bae96b1ac882763cb4c8d2451495b6e164" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bae96b1ac882763cb4c8d2451495b6e164" kindref="member">status_can_bit_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>0),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba43ff40f92c5cb0da19f05968992852b7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba43ff40f92c5cb0da19f05968992852b7" kindref="member">status_can_form_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>1),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba9ed82093c1bb95538000027c70570623" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba9ed82093c1bb95538000027c70570623" kindref="member">status_can_stuff_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>2),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba78e42513c60026fc263a8801caf05f29" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba78e42513c60026fc263a8801caf05f29" kindref="member">status_can_ack_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>3),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba361fa2997079c1f25b046e63d44be5ee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba361fa2997079c1f25b046e63d44be5ee" kindref="member">status_can_crc_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>4),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="38" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bafdd5a9663f667ae265e7546de2440e9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bafdd5a9663f667ae265e7546de2440e9e" kindref="member">status_can_other_error</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>5),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55baa220d5bd47aa8b734b151015496e93c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55baa220d5bd47aa8b734b151015496e93c2" kindref="member">status_can_tx_fifo_full</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>6),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba6077b3bdf357687fa33f2b7f27fd6b05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55ba6077b3bdf357687fa33f2b7f27fd6b05" kindref="member">status_can_filter_index_invalid</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>7),<sp/></highlight></codeline>
<codeline lineno="41" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bac0d5ba8473773f14d321b14e16c8631f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55bac0d5ba8473773f14d321b14e16c8631f" kindref="member">status_can_filter_num_invalid</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>8),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55babeeddfad79514084285efc9faa28a769" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gga06fc87d81c62e9abb8790b6e5713c55babeeddfad79514084285efc9faa28a769" kindref="member">status_can_invalid_bit_timing</ref><sp/>=<sp/><ref refid="group__common__interface_1gad76dfbb0423d0cd3a7b77cbcd9043146" kindref="member">MAKE_STATUS</ref>(<ref refid="group__common__interface_1ggadb49720dc49f7d4e4cf9adbf2948e409a5ae8e61c287616bbd025e28cafeae313" kindref="member">status_group_can</ref>,<sp/>9),<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal">};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="group__can__interface_1ga45004900abaec268c5921b69da8c2887" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_RECEIVE<sp/>(CAN_RTIF_RIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__can__interface_1gadddd2de4254d97c0661aa68e3b65f5b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_RX_BUF_OVERRUN<sp/>(CAN_RTIF_ROIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="group__can__interface_1gab269cb173bef923b1034ffca72d917cd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_RX_BUF_FULL<sp/>(CAN_RTIF_RFIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="group__can__interface_1gab133777fcb21ebacf88e2c5a0599d90b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_RX_BUF_ALMOST_FULL<sp/>(CAN_RTIF_RAFIF_MASK)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__can__interface_1ga36e97c1be186b5a75158413c9b83a03f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_TX_PRIMARY_BUF<sp/>(CAN_RTIF_TPIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="group__can__interface_1gadce5e0b22e7fea05d914df345c4064d0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_TX_SECONDARY_BUF<sp/>(CAN_RTIF_TSIF_MASK)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group__can__interface_1ga49527ad60df35216eb68581e55b5f1ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_ERROR<sp/>(CAN_RTIF_EIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group__can__interface_1ga10cf0ca55b49dcd8b6d36f2841ed0186" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_EVENT_ABORT<sp/>(CAN_RTIF_AIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group__can__interface_1gabac161adbf7014034259484d94dada78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STB_IS_EMPTY<sp/>(0U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__can__interface_1ga9c82d54d07460fcd04b058e3bd443823" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STB_LESS_EQUAL_HALF_FULL<sp/>(1U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="group__can__interface_1gaf8b4612501a0582068c54890b79b0c80" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STB_MORE_THAN_HALF_FULL<sp/>(2U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="group__can__interface_1gadbcad1bc10c1b20bc669c6cad6f0e0c8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_STB_IS_FULL<sp/>(3U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="group__can__interface_1ga31ccdcf915e018404ef95f6eb1285398" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_RXBUF_IS_EMPTY<sp/>(0U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group__can__interface_1ga41040bd96b02a36221dd0e07357fb8b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_RXBUF_HAS_DATA<sp/>(1U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="group__can__interface_1gaa32eec42bee70c9ffe7533b0d261952f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_RXBUF_ALMOST_FULL<sp/>(2U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group__can__interface_1ga53eea02ce7f65e6c6fe10f93d28aaebb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_RXBUF_IS_FULL<sp/>(3U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="group__can__interface_1ga826fb80a9cb2519389e3d240916f4aa8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_WARNING_LIMIT_FLAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_ERRINT_EWARN_MASK)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group__can__interface_1ga49eacceb89aaf21fbc6bcc82bb43f900" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_PASSIVE_MODE_ACTIVE_FLAG<sp/><sp/><sp/><sp/><sp/>(CAN_ERRINT_EPASS_MASK)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="group__can__interface_1ga7711abcc1bd4f24605a7dde3d050d383" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_PASSIVE_INT_ENABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_ERRINT_EPIE_MASK)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="group__can__interface_1ga9463e8494da893fc524c11a3ddc874bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_PASSIVE_INT_FLAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_ERRINT_EPIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="group__can__interface_1ga99d87ea7842cd8048b282d5c1894eb16" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_ARBITRATION_LOST_INT_ENABLE<sp/><sp/>(CAN_ERRINT_ALIE_MASK)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="group__can__interface_1ga8e3507f80810b115b23def9f75f069bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_ARBITRATION_LOST_INT_FLAG<sp/><sp/><sp/><sp/>(CAN_ERRINT_ALIE_MASK)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="group__can__interface_1gad9b4a37700a584948b82c44f896c18df" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_BUS_ERROR_INT_ENABLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_ERRINT_BEIE_MASK)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="group__can__interface_1gaaf6de434d010d4ebe013a0ae1882c1da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ERROR_BUS_ERROR_INT_FLAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(CAN_ERRINT_BEIF_MASK)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="group__can__interface_1ga46e012eee9f7ee0e7da17b95e6283802" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_NO_ERROR<sp/><sp/><sp/><sp/><sp/><sp/>(0U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="group__can__interface_1ga9a2c4773cca5be1fe436745454de514c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_BIT_ERROR<sp/><sp/><sp/><sp/><sp/>(1U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="group__can__interface_1ga4ceea60be8e37c35ed578a74e681ec45" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_FORM_ERROR<sp/><sp/><sp/><sp/>(2U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="group__can__interface_1ga9f09020f9f5a3ae1416bdb9757d68b42" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_STUFF_ERROR<sp/><sp/><sp/>(3U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="group__can__interface_1ga70ab31920bdfe51ae4a86d3e55029f3a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_ACK_ERROR<sp/><sp/><sp/><sp/><sp/>(4U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group__can__interface_1ga9442a06e746e173590307f1fe69c2535" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_CRC_ERROR<sp/><sp/><sp/><sp/><sp/>(5U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="group__can__interface_1ga85288ce8739e201312d3d7cd3dcbcb7a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_OTHER_ERROR<sp/><sp/><sp/>(6U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="group__can__interface_1gaf0964b203588ef81387c902be12bfa4f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_KIND_OF_ERROR_BUS_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(7U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_can_mode<sp/>{</highlight></codeline>
<codeline lineno="103" refid="hpm__can__drv_8h_1a1b1dff5ca63d9ff1524d16e43d33634a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a1b1dff5ca63d9ff1524d16e43d33634a" kindref="member">can_mode_normal</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104" refid="hpm__can__drv_8h_1a72bf42faa859a78510e17b25a3f3d9f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a72bf42faa859a78510e17b25a3f3d9f4" kindref="member">can_mode_loopback_internal</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105" refid="hpm__can__drv_8h_1a173d0a159f2a9e638a369ddff6b91e20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a173d0a159f2a9e638a369ddff6b91e20" kindref="member">can_mode_loopback_external</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106" refid="hpm__can__drv_8h_1a4523935ec12564ac61ff7b9af5993727" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a4523935ec12564ac61ff7b9af5993727" kindref="member">can_mode_listen_only</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="107" refid="group__can__interface_1ga52f54c24e8e9ae0e017b12e3d561ce2d" refkind="member"><highlight class="normal">}<sp/><ref refid="group__can__interface_1ga52f54c24e8e9ae0e017b12e3d561ce2d" kindref="member">can_node_mode_t</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_can_bit_timing_option<sp/>{</highlight></codeline>
<codeline lineno="113" refid="hpm__can__drv_8h_1af0844b6ef860ab2c22a93ac812e1d0e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1af0844b6ef860ab2c22a93ac812e1d0e0" kindref="member">can_bit_timing_can2_0</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114" refid="hpm__can__drv_8h_1a319c88eb66af8bd9728187814747f281" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a319c88eb66af8bd9728187814747f281" kindref="member">can_bit_timing_canfd_nominal</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="115" refid="hpm__can__drv_8h_1a7d28865087c13478e6ea1108372831b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a7d28865087c13478e6ea1108372831b0" kindref="member">can_bit_timing_canfd_data</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="116" refid="group__can__interface_1ga262601289513f1abac3f06d2f55bc624" refkind="member"><highlight class="normal">}<sp/><ref refid="group__can__interface_1ga262601289513f1abac3f06d2f55bc624" kindref="member">can_bit_timing_option_t</ref>;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="122" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7af28e46e53eb21b4aca04e23ee366cfdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7af28e46e53eb21b4aca04e23ee366cfdf" kindref="member">can_payload_size_0</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a7ed3d475850172634efd7d4207bea421" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a7ed3d475850172634efd7d4207bea421" kindref="member">can_payload_size_1</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a59e88bd1de784788fcf3ffe563bfee24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a59e88bd1de784788fcf3ffe563bfee24" kindref="member">can_payload_size_2</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="125" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae1c9a2c883e56564ac1a5b47947482e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae1c9a2c883e56564ac1a5b47947482e4" kindref="member">can_payload_size_3</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a294b840e944b3989e687ad25228e9219" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a294b840e944b3989e687ad25228e9219" kindref="member">can_payload_size_4</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a676fc9d6d28fd42ed6164017af5dd11d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a676fc9d6d28fd42ed6164017af5dd11d" kindref="member">can_payload_size_5</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7add2a67966e03f6e376aab337481c8d2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7add2a67966e03f6e376aab337481c8d2f" kindref="member">can_payload_size_6</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae0952cd9017dd54fc3cc237d35f4b0f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae0952cd9017dd54fc3cc237d35f4b0f8" kindref="member">can_payload_size_7</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a1fd9ac23c0a1c70732b9cd16f840ea44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a1fd9ac23c0a1c70732b9cd16f840ea44" kindref="member">can_payload_size_8</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7af3efce552949dcf79e46b9e82e19d970" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7af3efce552949dcf79e46b9e82e19d970" kindref="member">can_payload_size_12</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="132" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a8d460591395d51862e2202f59b3a619c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a8d460591395d51862e2202f59b3a619c" kindref="member">can_payload_size_16</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a64eaeca350b8d1a37400abd89d3dc52f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a64eaeca350b8d1a37400abd89d3dc52f" kindref="member">can_payload_size_20</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a74991244c51e449819a26e4e79ef29ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a74991244c51e449819a26e4e79ef29ec" kindref="member">can_payload_size_24</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a13cc8368ae15618a9f7b227c05270fe3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a13cc8368ae15618a9f7b227c05270fe3" kindref="member">can_payload_size_32</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a4a246cd64d7852b3e70956df040fc7ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a4a246cd64d7852b3e70956df040fc7ed" kindref="member">can_payload_size_48</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a4f54e842aff31ef877394d929fcdd4da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a4f54e842aff31ef877394d929fcdd4da" kindref="member">can_payload_size_64</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138" refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae25ee666c07bd147f6a811cd798cfc8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7ae25ee666c07bd147f6a811cd798cfc8c" kindref="member">can_payload_size_max</ref><sp/>=<sp/><ref refid="group__can__interface_1ggadf764cbdea00d65edcd07bb9953ad2b7a4f54e842aff31ef877394d929fcdd4da" kindref="member">can_payload_size_64</ref>,</highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structcan__bit__timing__param__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="145" refid="structcan__bit__timing__param__t_1a23f961a958d2e42a2f281219e208d09f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__bit__timing__param__t_1a23f961a958d2e42a2f281219e208d09f" kindref="member">prescaler</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="146" refid="structcan__bit__timing__param__t_1aceb1f5e517eed0abfab6545aeccac611" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__bit__timing__param__t_1aceb1f5e517eed0abfab6545aeccac611" kindref="member">num_seg1</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="147" refid="structcan__bit__timing__param__t_1a795e03158971ecf10966bb256f304aa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__bit__timing__param__t_1a795e03158971ecf10966bb256f304aa1" kindref="member">num_seg2</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148" refid="structcan__bit__timing__param__t_1a5449778d96223967f55d9bd3eac25256" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__bit__timing__param__t_1a5449778d96223967f55d9bd3eac25256" kindref="member">num_sjw</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}<sp/><ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref>;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">_can_rx_buf<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buffer[20];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>id:<sp/>29;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>error_state_indicator:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>dlc:<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bitrate_switch:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>canfd_frame:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>remote_frame:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>extend_id:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>4;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>loopback_message:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>error_type:<sp/>3;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>cycle_time:<sp/>16;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>data[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="175" refid="group__can__interface_1gaead5fa76fd408804e2cd0828a2fe6ecc" refkind="member"><highlight class="normal">}<sp/><ref refid="group__can__interface_1gaead5fa76fd408804e2cd0828a2fe6ecc" kindref="member">can_receive_buf_t</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">_can_tx_buf<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>buffer[18];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>id:<sp/>29;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>2;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>transmit_timestamp_enable:<sp/>1;<sp/><sp/></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>dlc:<sp/>4;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>bitrate_switch:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>canfd_frame:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>remote_frame:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>extend_id:<sp/>1;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>:<sp/>24;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>data[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="198" refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" refkind="member"><highlight class="normal">}<sp/><ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>_can_filter_id_mode<sp/>{</highlight></codeline>
<codeline lineno="204" refid="hpm__can__drv_8h_1a7056c5b615e8772c5a446a04fbb54355" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a7056c5b615e8772c5a446a04fbb54355" kindref="member">can_filter_id_mode_both_frames</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205" refid="hpm__can__drv_8h_1a0a9f6c970f8fe9d11a840a13e8adbc57" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a0a9f6c970f8fe9d11a840a13e8adbc57" kindref="member">can_filter_id_mode_standard_frames</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206" refid="hpm__can__drv_8h_1a78ddd12aeba316d936ca26895118bf39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hpm__can__drv_8h_1a78ddd12aeba316d936ca26895118bf39" kindref="member">can_filter_id_mode_extended_frames</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207" refid="group__can__interface_1gafb42b10b1f2a2ca45872da968340a0a4" refkind="member"><highlight class="normal">}<sp/><ref refid="group__can__interface_1gafb42b10b1f2a2ca45872da968340a0a4" kindref="member">can_filter_id_mode_t</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="structcan__filter__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="213" refid="structcan__filter__config__t_1a512d9e9145af2fb9735c5079a6ac3317" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__filter__config__t_1a512d9e9145af2fb9735c5079a6ac3317" kindref="member">index</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214" refid="structcan__filter__config__t_1a1190dad2fc30aac814b0b42b040cb7d9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1gafb42b10b1f2a2ca45872da968340a0a4" kindref="member">can_filter_id_mode_t</ref><sp/><ref refid="structcan__filter__config__t_1a1190dad2fc30aac814b0b42b040cb7d9" kindref="member">id_mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="215" refid="structcan__filter__config__t_1a0ccae370067d88ec8e9b03b0e75f0549" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__filter__config__t_1a0ccae370067d88ec8e9b03b0e75f0549" kindref="member">enable</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216" refid="structcan__filter__config__t_1a53ee3f0a07d6610f76c1bf457cf2109d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structcan__filter__config__t_1a53ee3f0a07d6610f76c1bf457cf2109d" kindref="member">code</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217" refid="structcan__filter__config__t_1a5e970f2349ba56ec568487934cf58295" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structcan__filter__config__t_1a5e970f2349ba56ec568487934cf58295" kindref="member">mask</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal">}<sp/><ref refid="structcan__filter__config__t" kindref="compound">can_filter_config_t</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="structcan__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="226" refid="structcan__config__t_1a26a3705b7540fdef272f64d0bd648093" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structcan__config__t_1a26a3705b7540fdef272f64d0bd648093" kindref="member">baudrate</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227" refid="structcan__config__t_1a69ff80bff54bc96b93299f36faa8ce93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structcan__config__t_1a69ff80bff54bc96b93299f36faa8ce93" kindref="member">baudrate_fd</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="229" refid="structcan__config__t_1a9386ca9c2dca1c7b9fced166c881fb55" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__config__t_1a9386ca9c2dca1c7b9fced166c881fb55" kindref="member">can20_samplepoint_min</ref>;</highlight></codeline>
<codeline lineno="231" refid="structcan__config__t_1a3dad57f38e4b79bd0efd5d1cd9c9da45" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__config__t_1a3dad57f38e4b79bd0efd5d1cd9c9da45" kindref="member">can20_samplepoint_max</ref>;</highlight></codeline>
<codeline lineno="233" refid="structcan__config__t_1a5fa6835023ed8d5014d2210987a799e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__config__t_1a5fa6835023ed8d5014d2210987a799e8" kindref="member">canfd_samplepoint_min</ref>;</highlight></codeline>
<codeline lineno="235" refid="structcan__config__t_1aa42adfd1ec2219bb60e127f3ce3bebf1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structcan__config__t_1aa42adfd1ec2219bb60e127f3ce3bebf1" kindref="member">canfd_samplepoint_max</ref>;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="238" refid="structcan__config__t_1a5bbb9370ef5b01a66005150242d14ac9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref><sp/><ref refid="structcan__config__t_1a5bbb9370ef5b01a66005150242d14ac9" kindref="member">can_timing</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="239" refid="structcan__config__t_1aa11e26fba38169f73ddd83e4825d6699" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref><sp/><ref refid="structcan__config__t_1aa11e26fba38169f73ddd83e4825d6699" kindref="member">canfd_timing</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="structcan__config__t_1a8c5cf03988f9268851dabd73ab9c82c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__can__interface_1ga52f54c24e8e9ae0e017b12e3d561ce2d" kindref="member">can_node_mode_t</ref><sp/><ref refid="structcan__config__t_1a8c5cf03988f9268851dabd73ab9c82c2" kindref="member">mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244" refid="structcan__config__t_1a7206818b05e7ba6ea85cc907a73b5db1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1a7206818b05e7ba6ea85cc907a73b5db1" kindref="member">use_lowlevel_timing_setting</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="245" refid="structcan__config__t_1a19af4b7bca348e7dab6a6fab042dd8ec" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1a19af4b7bca348e7dab6a6fab042dd8ec" kindref="member">enable_canfd</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246" refid="structcan__config__t_1a5bbbb8061d661470534c4c161f85aecb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1a5bbbb8061d661470534c4c161f85aecb" kindref="member">enable_self_ack</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247" refid="structcan__config__t_1a6436316a8a55217dc68c09f69edcb3f3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1a6436316a8a55217dc68c09f69edcb3f3" kindref="member">disable_ptb_retransmission</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248" refid="structcan__config__t_1aa536f53638875b64336d3b23c9ddeda5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1aa536f53638875b64336d3b23c9ddeda5" kindref="member">disable_stb_retransmission</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249" refid="structcan__config__t_1a07b274815a5956ebe5247027fdd604de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1a07b274815a5956ebe5247027fdd604de" kindref="member">enable_tdc</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="251" refid="structcan__config__t_1af51a142c8ed9655c03d40eee6e246b4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structcan__config__t_1af51a142c8ed9655c03d40eee6e246b4e" kindref="member">filter_list_num</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="252" refid="structcan__config__t_1a2a5d639bd208e3106b57bed936e348b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcan__filter__config__t" kindref="compound">can_filter_config_t</ref><sp/>*<ref refid="structcan__config__t_1a2a5d639bd208e3106b57bed936e348b1" kindref="member">filter_list</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="254" refid="structcan__config__t_1a48bd1ee8818eecc1ac71315a4bc715e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structcan__config__t_1a48bd1ee8818eecc1ac71315a4bc715e8" kindref="member">irq_txrx_enable_mask</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255" refid="structcan__config__t_1a09d5b060e49721baa8831c7cc77a213b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structcan__config__t_1a09d5b060e49721baa8831c7cc77a213b" kindref="member">irq_error_enable_mask</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="256" refid="structcan__config__t_1aa0da6fd6a6d9956a8ffd57f33ffe5b44" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1aa0da6fd6a6d9956a8ffd57f33ffe5b44" kindref="member">enable_tx_buffer_priority_mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="257" refid="structcan__config__t_1a5326dd1b36dfc6efe18dd07fc6a26e4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structcan__config__t_1a5326dd1b36dfc6efe18dd07fc6a26e4d" kindref="member">enable_can_fd_iso_mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="258"><highlight class="normal">}<sp/><ref refid="structcan__config__t" kindref="compound">can_config_t</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="group__can__interface_1gab6e2a05f695556c4b536c204d124f7f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gab6e2a05f695556c4b536c204d124f7f9" kindref="member">can_reset</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1afee734403d0949609cb2d2ba7246228b" kindref="member">CAN_CMD_STA_CMD_CTRL_RESET_MASK</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1afee734403d0949609cb2d2ba7246228b" kindref="member">CAN_CMD_STA_CMD_CTRL_RESET_MASK</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="group__can__interface_1ga0c6069b848881509e94d03531cb9523e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga0c6069b848881509e94d03531cb9523e" kindref="member">can_force_bus_off</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a93850832febd47cda3907fd53a7e7bb3" kindref="member">CAN_CMD_STA_CMD_CTRL_BUSOFF_MASK</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="group__can__interface_1ga0546791b59326060a6572a93cbcd4fc4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga0546791b59326060a6572a93cbcd4fc4" kindref="member">can_set_node_mode</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/><ref refid="group__can__interface_1ga52f54c24e8e9ae0e017b12e3d561ce2d" kindref="member">can_node_mode_t</ref><sp/>mode)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>cfg_stat<sp/>=<sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;<sp/>~(<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ac17f0dbfa90d2c72340c9d011a7ef578" kindref="member">CAN_CMD_STA_CMD_CTRL_LBME_MASK</ref><sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a857984e9773a44215d161ba65b43e1c5" kindref="member">CAN_CMD_STA_CMD_CTRL_LBMI_MASK</ref><sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ac9947fa7f8ba5b298907c8c0f7984de6" kindref="member">CAN_CMD_STA_CMD_CTRL_LOM_MASK</ref>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/><ref refid="hpm__can__drv_8h_1a72bf42faa859a78510e17b25a3f3d9f4" kindref="member">can_mode_loopback_internal</ref>)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_stat<sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a857984e9773a44215d161ba65b43e1c5" kindref="member">CAN_CMD_STA_CMD_CTRL_LBMI_MASK</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/><ref refid="hpm__can__drv_8h_1a173d0a159f2a9e638a369ddff6b91e20" kindref="member">can_mode_loopback_external</ref>)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_stat<sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ac17f0dbfa90d2c72340c9d011a7ef578" kindref="member">CAN_CMD_STA_CMD_CTRL_LBME_MASK</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/><ref refid="hpm__can__drv_8h_1a4523935ec12564ac61ff7b9af5993727" kindref="member">can_mode_listen_only</ref>)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cfg_stat<sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ac9947fa7f8ba5b298907c8c0f7984de6" kindref="member">CAN_CMD_STA_CMD_CTRL_LOM_MASK</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN<sp/>normal<sp/>work<sp/>mode,<sp/>no<sp/>change<sp/>needed<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>=<sp/>cfg_stat;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="group__can__interface_1ga0a0de02da597aa142c8f2c635451af8b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga0a0de02da597aa142c8f2c635451af8b" kindref="member">can_enable_listen_only_mode</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ac9947fa7f8ba5b298907c8c0f7984de6" kindref="member">CAN_CMD_STA_CMD_CTRL_LOM_MASK</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ac9947fa7f8ba5b298907c8c0f7984de6" kindref="member">CAN_CMD_STA_CMD_CTRL_LOM_MASK</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="group__can__interface_1ga4dcb0a0b43beca63626c1bd70d233229" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga4dcb0a0b43beca63626c1bd70d233229" kindref="member">can_enter_standby_mode</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="341"><highlight class="normal">{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a81d888de81f2e549257d1be9442e98a1" kindref="member">CAN_CMD_STA_CMD_CTRL_STBY_MASK</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a81d888de81f2e549257d1be9442e98a1" kindref="member">CAN_CMD_STA_CMD_CTRL_STBY_MASK</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="group__can__interface_1ga435ea033e91254b240a3d2692c593f5f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga435ea033e91254b240a3d2692c593f5f" kindref="member">can_disable_ptb_retransmission</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a3fe53c7536253cc862712c479feca0b3" kindref="member">CAN_CMD_STA_CMD_CTRL_TPSS_MASK</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a3fe53c7536253cc862712c479feca0b3" kindref="member">CAN_CMD_STA_CMD_CTRL_TPSS_MASK</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="group__can__interface_1gadd77ad7b290d49d4c8111cb64e183c68" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gadd77ad7b290d49d4c8111cb64e183c68" kindref="member">can_is_ptb_retransmission_disabled</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="372"><highlight class="normal">{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a3fe53c7536253cc862712c479feca0b3" kindref="member">CAN_CMD_STA_CMD_CTRL_TPSS_MASK</ref>)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="374"><highlight class="normal">}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="group__can__interface_1gae65f034449e099c9d1416fec6ff6f65d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae65f034449e099c9d1416fec6ff6f65d" kindref="member">can_disable_stb_retransmission</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a6ea271454d707479f1144a40840d680c" kindref="member">CAN_CMD_STA_CMD_CTRL_TSSS_MASK</ref>;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a6ea271454d707479f1144a40840d680c" kindref="member">CAN_CMD_STA_CMD_CTRL_TSSS_MASK</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="group__can__interface_1ga9065095bbf7a3fb70dd53e84aef45bc2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga9065095bbf7a3fb70dd53e84aef45bc2" kindref="member">can_is_stb_retransmission_disabled</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a6ea271454d707479f1144a40840d680c" kindref="member">CAN_CMD_STA_CMD_CTRL_TSSS_MASK</ref>)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="group__can__interface_1gac1501582c751f8a28985a1c3c5243d1a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac1501582c751f8a28985a1c3c5243d1a" kindref="member">can_select_tx_buffer</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>select_secondary_buffer)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(select_secondary_buffer)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1afebedd9723664eafffd1b2eb8c30ad22" kindref="member">CAN_CMD_STA_CMD_CTRL_TBSEL_MASK</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1afebedd9723664eafffd1b2eb8c30ad22" kindref="member">CAN_CMD_STA_CMD_CTRL_TBSEL_MASK</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="425" refid="group__can__interface_1ga6ccd85b582f85de46ab638c3c93722a0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga6ccd85b582f85de46ab638c3c93722a0" kindref="member">can_start_high_priority_message_transmit</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aa85a7f73f608d1d559f4f16c9a6fc037" kindref="member">CAN_CMD_STA_CMD_CTRL_TPE_MASK</ref>;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="group__can__interface_1gaa24188776602337467340d570cd546b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaa24188776602337467340d570cd546b9" kindref="member">can_abort_high_priority_message_transmit</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a16e065a51f79999efcf741a6d7f4cdd6" kindref="member">CAN_CMD_STA_CMD_CTRL_TPA_MASK</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="group__can__interface_1ga24f9342949f8ec44bd7513a75557a44a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga24f9342949f8ec44bd7513a75557a44a" kindref="member">can_start_message_transmit</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ab9c11e06f8b9667629b27c0ff673c0d1" kindref="member">CAN_CMD_STA_CMD_CTRL_TSONE_MASK</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="452" refid="group__can__interface_1ga3a4320d363e5618566eb83944319b019" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga3a4320d363e5618566eb83944319b019" kindref="member">can_start_all_message_transmit</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a4c0f729a337410eb7bb552ccedd99562" kindref="member">CAN_CMD_STA_CMD_CTRL_TSALL_MASK</ref>;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="group__can__interface_1gae9e0bc700b3f3d645e3a1b98d83a9ddf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae9e0bc700b3f3d645e3a1b98d83a9ddf" kindref="member">can_abort_message_transmit</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1af0230f61c1414f548d6a7f7be24fa53b" kindref="member">CAN_CMD_STA_CMD_CTRL_TSA_MASK</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="group__can__interface_1ga92aa2e20006d67b433ccfe0ab501710a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga92aa2e20006d67b433ccfe0ab501710a" kindref="member">can_switch_to_next_tx_buffer</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ac208138b6a514862685e5dad256ed908" kindref="member">CAN_CMD_STA_CMD_CTRL_TSNEXT_MASK</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="group__can__interface_1gace7f0b6c493ba5dffd840fdcd96d4477" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gace7f0b6c493ba5dffd840fdcd96d4477" kindref="member">can_select_tx_buffer_priority_mode</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable_priority_decision)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable_priority_decision)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aa01286f781672c97b96631ebaffb82b7" kindref="member">CAN_CMD_STA_CMD_CTRL_TSMODE_MASK</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aa01286f781672c97b96631ebaffb82b7" kindref="member">CAN_CMD_STA_CMD_CTRL_TSMODE_MASK</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="group__can__interface_1ga5de7ef8a412f0cfd68d498fca7508e85" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1ga5de7ef8a412f0cfd68d498fca7508e85" kindref="member">can_get_secondary_transmit_buffer_status</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a8f90d8344717f044ce9c4e1519041c09" kindref="member">CAN_CMD_STA_CMD_CTRL_TSSTAT_GET</ref>(base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="group__can__interface_1gaeb857b795d4302f0db1ba39ea79e3e6b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaeb857b795d4302f0db1ba39ea79e3e6b" kindref="member">can_is_primary_transmit_buffer_full</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aa85a7f73f608d1d559f4f16c9a6fc037" kindref="member">CAN_CMD_STA_CMD_CTRL_TPE_MASK</ref>)<sp/>!=<sp/>0U);</highlight></codeline>
<codeline lineno="510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="group__can__interface_1gaed7d586c58e6394c87e5c9ae660b7372" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaed7d586c58e6394c87e5c9ae660b7372" kindref="member">can_is_secondary_transmit_buffer_full</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a8f90d8344717f044ce9c4e1519041c09" kindref="member">CAN_CMD_STA_CMD_CTRL_TSSTAT_GET</ref>(base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref>)<sp/>==<sp/><ref refid="group__can__interface_1gadbcad1bc10c1b20bc669c6cad6f0e0c8" kindref="member">CAN_STB_IS_FULL</ref>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="group__can__interface_1ga1da71caefe18e0de7bec467bdc60c329" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga1da71caefe18e0de7bec467bdc60c329" kindref="member">can_is_in_bus_off_mode</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a93850832febd47cda3907fd53a7e7bb3" kindref="member">CAN_CMD_STA_CMD_CTRL_BUSOFF_MASK</ref>)<sp/>!=<sp/>0U);</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="group__can__interface_1ga6d8473a6062662c406d835816853640c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga6d8473a6062662c406d835816853640c" kindref="member">can_enable_self_ack</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a3610d131fc979ed0782185526a87975c" kindref="member">CAN_CMD_STA_CMD_CTRL_SACK_MASK</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a3610d131fc979ed0782185526a87975c" kindref="member">CAN_CMD_STA_CMD_CTRL_SACK_MASK</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="group__can__interface_1gaf4fafca8d57538f0d52b456b670003e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaf4fafca8d57538f0d52b456b670003e2" kindref="member">can_set_receive_buffer_overflow_mode</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>override_enable)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(override_enable)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a8af11c38afe546efcf78566198dba4a5" kindref="member">CAN_CMD_STA_CMD_CTRL_ROM_MASK</ref>;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a8af11c38afe546efcf78566198dba4a5" kindref="member">CAN_CMD_STA_CMD_CTRL_ROM_MASK</ref>;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="570" refid="group__can__interface_1gac8d9eb5826c69dc9eb87993d579c7134" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gac8d9eb5826c69dc9eb87993d579c7134" kindref="member">can_is_receive_buffer_overflow</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="571"><highlight class="normal">{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gae1eae6c44712583303b6e650a21d4875" kindref="member">IS_HPM_BITMASK_SET</ref>(base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref>,<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a501ea026097607156aaad124d236a68c" kindref="member">CAN_CMD_STA_CMD_CTRL_ROV_MASK</ref>);</highlight></codeline>
<codeline lineno="573"><highlight class="normal">}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="580" refid="group__can__interface_1ga17d145853d07de1d00ec40b335906339" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga17d145853d07de1d00ec40b335906339" kindref="member">can_release_receive_buffer</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a1a625a1fde778c2d78917d2a0a35cca0" kindref="member">CAN_CMD_STA_CMD_CTRL_RREL_MASK</ref>;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="group__can__interface_1ga3ebf853b8d9bc79fa98b545b51cc4b7e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga3ebf853b8d9bc79fa98b545b51cc4b7e" kindref="member">can_allow_store_all_data_in_receive_buffer</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow)</highlight></codeline>
<codeline lineno="591"><highlight class="normal">{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(allow)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aebd275c7835875e98478fbbe8d31fc97" kindref="member">CAN_CMD_STA_CMD_CTRL_RBALL_MASK</ref>;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aebd275c7835875e98478fbbe8d31fc97" kindref="member">CAN_CMD_STA_CMD_CTRL_RBALL_MASK</ref>;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="group__can__interface_1ga6bf8ad2d2c3e4596cedff91910868d79" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1ga6bf8ad2d2c3e4596cedff91910868d79" kindref="member">can_get_receive_buffer_status</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a0ca943c88a07dfd2bd83a6a2c47b2f4d" kindref="member">CAN_CMD_STA_CMD_CTRL_RSTAT_GET</ref>(base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="group__can__interface_1gae0825616300ddf36c1be07a32ddf657b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae0825616300ddf36c1be07a32ddf657b" kindref="member">can_is_data_available_in_receive_buffer</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="615"><highlight class="normal">{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a0ca943c88a07dfd2bd83a6a2c47b2f4d" kindref="member">CAN_CMD_STA_CMD_CTRL_RSTAT_GET</ref>(base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref>)<sp/>!=<sp/><ref refid="group__can__interface_1ga31ccdcf915e018404ef95f6eb1285398" kindref="member">CAN_RXBUF_IS_EMPTY</ref>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="625" refid="group__can__interface_1ga84ebb3675b0698af0bd572b6dff7888c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga84ebb3675b0698af0bd572b6dff7888c" kindref="member">can_enable_can_fd_iso_mode</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="626"><highlight class="normal">{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(enable)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>|=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a7cb4aa38ee8ffbf8d0db83328fd47b0e" kindref="member">CAN_CMD_STA_CMD_CTRL_FD_ISO_MASK</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a203a84a26491d0bb5de5a8aa5e64f4" kindref="member">CMD_STA_CMD_CTRL</ref><sp/>&amp;=<sp/>~<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a7cb4aa38ee8ffbf8d0db83328fd47b0e" kindref="member">CAN_CMD_STA_CMD_CTRL_FD_ISO_MASK</ref>;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="639" refid="group__can__interface_1gacd2e45edae3c77e25a15cfd58b0e04d2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gacd2e45edae3c77e25a15cfd58b0e04d2" kindref="member">can_enable_tx_rx_irq</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>mask)</highlight></codeline>
<codeline lineno="640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1ad052b367e5253c77fa9756ce1eac31a9" kindref="member">RTIE</ref><sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="642"><highlight class="normal">}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="group__can__interface_1gae1be4b29b7474bf9c64769daf92bb54e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gae1be4b29b7474bf9c64769daf92bb54e" kindref="member">can_disable_tx_rx_irq</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>mask)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1ad052b367e5253c77fa9756ce1eac31a9" kindref="member">RTIE</ref><sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="group__can__interface_1ga4cbc8dffa436fc2ad5f2d9bc4030f05e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga4cbc8dffa436fc2ad5f2d9bc4030f05e" kindref="member">can_clear_tx_rx_flags</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>flags)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1ab3b2065c4e611ec82ed902aef798cb89" kindref="member">RTIF</ref><sp/>=<sp/>flags;</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="670" refid="group__can__interface_1ga59d881ba010799dc9447f908d05ba39a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1ga59d881ba010799dc9447f908d05ba39a" kindref="member">can_get_tx_rx_flags</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="671"><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base-&gt;<ref refid="structCAN__Type_1ab3b2065c4e611ec82ed902aef798cb89" kindref="member">RTIF</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="680" refid="group__can__interface_1ga883ad3561bd3d6db480fe026cd2edf3a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga883ad3561bd3d6db480fe026cd2edf3a" kindref="member">can_enable_error_irq</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>mask)</highlight></codeline>
<codeline lineno="681"><highlight class="normal">{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1af137ad7c77d28f55ac71ffee8cc79dc8" kindref="member">ERRINT</ref><sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="691" refid="group__can__interface_1ga65457c022f3c55f288bf37942809ccc3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga65457c022f3c55f288bf37942809ccc3" kindref="member">can_disable_error_irq</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>mask)</highlight></codeline>
<codeline lineno="692"><highlight class="normal">{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1af137ad7c77d28f55ac71ffee8cc79dc8" kindref="member">ERRINT</ref><sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="group__can__interface_1gac550e035dd57a57b993140291e64cd03" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1gac550e035dd57a57b993140291e64cd03" kindref="member">can_get_error_interrupt_flags</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="702"><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(base-&gt;<ref refid="structCAN__Type_1af137ad7c77d28f55ac71ffee8cc79dc8" kindref="member">ERRINT</ref><sp/>&amp;<sp/>(uint8_t)<sp/>~(<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a938bbd34038047d47b6089cc2d1616bd" kindref="member">CAN_ERRINT_EPIE_MASK</ref><sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1af050e97adfeba0687a693cf66cd46f6d" kindref="member">CAN_ERRINT_ALIE_MASK</ref><sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a85fc0f385cd3ed395f34f75a14ca0652" kindref="member">CAN_ERRINT_BEIE_MASK</ref>));</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="711" refid="group__can__interface_1gadd32c6836083cea5910fa6d7be98df10" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gadd32c6836083cea5910fa6d7be98df10" kindref="member">can_clear_error_interrupt_flags</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>flags)</highlight></codeline>
<codeline lineno="712"><highlight class="normal">{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>&amp;=<sp/>(uint8_t)~(<ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a938bbd34038047d47b6089cc2d1616bd" kindref="member">CAN_ERRINT_EPIE_MASK</ref><sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1af050e97adfeba0687a693cf66cd46f6d" kindref="member">CAN_ERRINT_ALIE_MASK</ref><sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a85fc0f385cd3ed395f34f75a14ca0652" kindref="member">CAN_ERRINT_BEIE_MASK</ref>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1af137ad7c77d28f55ac71ffee8cc79dc8" kindref="member">ERRINT</ref><sp/>|=<sp/>flags;</highlight></codeline>
<codeline lineno="715"><highlight class="normal">}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="722" refid="group__can__interface_1ga86e7b4997864c184d96a25d210d68d92" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1ga86e7b4997864c184d96a25d210d68d92" kindref="member">can_get_last_error_kind</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="723"><highlight class="normal">{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ab506cd6de6f17d4d4a453219db3b12f3" kindref="member">CAN_EALCAP_KOER_GET</ref>(base-&gt;<ref refid="structCAN__Type_1a73aff82bfb2668f04ba604134566d318" kindref="member">EALCAP</ref>);</highlight></codeline>
<codeline lineno="725"><highlight class="normal">}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="732" refid="group__can__interface_1ga9df5fff463d7eefeb342e139a9b4edf5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1ga9df5fff463d7eefeb342e139a9b4edf5" kindref="member">can_get_last_arbitration_lost_position</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="733"><highlight class="normal">{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a383f01f730aaa4247b0bf1ae0bc1ff7c" kindref="member">CAN_EALCAP_ALC_GET</ref>(base-&gt;<ref refid="structCAN__Type_1a73aff82bfb2668f04ba604134566d318" kindref="member">EALCAP</ref>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal">}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="744" refid="group__can__interface_1gabaaf1ac9262c86fad5f3ca03c9abe63f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gabaaf1ac9262c86fad5f3ca03c9abe63f" kindref="member">can_set_transmitter_delay_compensation</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>sample_point,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="745"><highlight class="normal">{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(CAN_SOC_CANFD_TDC_REQUIRE_STUFF_EXCEPTION_WORKAROUND)<sp/>&amp;&amp;<sp/>(CAN_SOC_CANFD_TDC_REQUIRE_STUFF_EXCEPTION_WORKAROUND<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>sample_point;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>enable;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1aeb5b1aedab5e5c58f86632d232eaa143" kindref="member">TDC</ref><sp/>=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a22ecd9a92021eeea64422f655838c069" kindref="member">CAN_TDC_TDCEN_SET</ref>((uint8_t)<sp/>enable);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1aeb5b1aedab5e5c58f86632d232eaa143" kindref="member">TDC</ref><sp/>=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aceeb5ec7e4a590a77b014d484a0b912e" kindref="member">CAN_TDC_SSPOFF_SET</ref>(sample_point)<sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a22ecd9a92021eeea64422f655838c069" kindref="member">CAN_TDC_TDCEN_SET</ref>((uint8_t)<sp/>enable);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="group__can__interface_1ga2c29a479c133d9e24691dbbd79c045e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga2c29a479c133d9e24691dbbd79c045e2" kindref="member">can_set_warning_limits</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint8_t<sp/>almost_full_limit,<sp/>uint8_t<sp/>error_warning_limit)</highlight></codeline>
<codeline lineno="762"><highlight class="normal">{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a82764475fa33305bdaba3bf276667160" kindref="member">LIMIT</ref><sp/>=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a563b4b2728de4f388a81ad4fdb2312bd" kindref="member">CAN_LIMIT_AFWL_SET</ref>(almost_full_limit)<sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1aa5fc17402da27e64f8941aef30e26af9" kindref="member">CAN_LIMIT_EWL_SET</ref>(error_warning_limit);</highlight></codeline>
<codeline lineno="764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="771" refid="group__can__interface_1ga7ecdbd21447091b4a04d878674daeb14" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1ga7ecdbd21447091b4a04d878674daeb14" kindref="member">can_get_receive_error_count</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="772"><highlight class="normal">{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base-&gt;<ref refid="structCAN__Type_1ac568430e7b3e1a3ada9c02432953232e" kindref="member">RECNT</ref>;</highlight></codeline>
<codeline lineno="774"><highlight class="normal">}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="781" refid="group__can__interface_1ga619811359d4e0380e067129b76a53663" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="group__can__interface_1ga619811359d4e0380e067129b76a53663" kindref="member">can_get_transmit_error_count</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base)</highlight></codeline>
<codeline lineno="782"><highlight class="normal">{</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base-&gt;<ref refid="structCAN__Type_1a8a2fec5d6add6951d410aa50e16916c6" kindref="member">TECNT</ref>;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="792" refid="group__can__interface_1ga8def393aa0654c160a65da9cacaeeec3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga8def393aa0654c160a65da9cacaeeec3" kindref="member">can_enable_filter</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint32_t<sp/>index)</highlight></codeline>
<codeline lineno="793"><highlight class="normal">{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a9b506b0d71bc5b2e7de20721a0d8c3" kindref="member">ACF_EN</ref><sp/>|=<sp/>(uint16_t)<sp/>(1U<sp/>&lt;&lt;<sp/>index);</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="803" refid="group__can__interface_1ga113d609ad117311b29f09a17f4052520" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga113d609ad117311b29f09a17f4052520" kindref="member">can_disable_filter</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/>uint32_t<sp/>index)</highlight></codeline>
<codeline lineno="804"><highlight class="normal">{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a8a9b506b0d71bc5b2e7de20721a0d8c3" kindref="member">ACF_EN</ref><sp/>&amp;=<sp/>(uint16_t)<sp/>~(1U<sp/>&lt;&lt;<sp/>index);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1gabe2e41f5a36374c2864816ed68042de3" kindref="member">can_get_default_config</ref>(<ref refid="structcan__config__t" kindref="compound">can_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga4b98f7d670a9f51da7ad27fd36ec609d" kindref="member">can_init</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/><ref refid="structcan__config__t" kindref="compound">can_config_t</ref><sp/>*config,<sp/>uint32_t<sp/>src_clk_freq);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga5f816882c2c1001ca8381608deab446c" kindref="member">can_deinit</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="836" refid="group__can__interface_1ga47e798ab81b91c1d129685cd54a6c2b9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga47e798ab81b91c1d129685cd54a6c2b9" kindref="member">can_set_slow_speed_timing</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref><sp/>*param)</highlight></codeline>
<codeline lineno="837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a37b668491ed0e48370d421c05a9ba979" kindref="member">S_PRESC</ref><sp/>=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a1266d94af7ae2c41e67d375826da5995" kindref="member">CAN_S_PRESC_S_PRESC_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1a23f961a958d2e42a2f281219e208d09f" kindref="member">prescaler</ref><sp/>-<sp/>1U)<sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a270b63bffe3b6763ece99b07e4109f2d" kindref="member">CAN_S_PRESC_S_SEG_1_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1aceb1f5e517eed0abfab6545aeccac611" kindref="member">num_seg1</ref><sp/>-<sp/>2U)<sp/>|</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a0a0f2255923d104c03696554b6ce7caf" kindref="member">CAN_S_PRESC_S_SEG_2_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1a795e03158971ecf10966bb256f304aa1" kindref="member">num_seg2</ref><sp/>-<sp/>1U)<sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a17a3e40546948687159e650434b22e79" kindref="member">CAN_S_PRESC_S_SJW_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1a5449778d96223967f55d9bd3eac25256" kindref="member">num_sjw</ref><sp/>-<sp/>1U);</highlight></codeline>
<codeline lineno="840"><highlight class="normal">}</highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="847" refid="group__can__interface_1ga87a6964bf3e2d2ad391b626c60f79363" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1ga87a6964bf3e2d2ad391b626c60f79363" kindref="member">can_set_fast_speed_timing</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref><sp/>*param)</highlight></codeline>
<codeline lineno="848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>base-&gt;<ref refid="structCAN__Type_1a5e423b8950a8850dfe17f30ab9e4ca26" kindref="member">F_PRESC</ref><sp/>=<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a717e26935382357c457ca65a711a710d" kindref="member">CAN_F_PRESC_F_PRESC_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1a23f961a958d2e42a2f281219e208d09f" kindref="member">prescaler</ref><sp/>-<sp/>1U)<sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a2101247c801c9ef059bfd74d479e2455" kindref="member">CAN_F_PRESC_F_SEG_1_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1aceb1f5e517eed0abfab6545aeccac611" kindref="member">num_seg1</ref><sp/>-<sp/>2U)<sp/>|</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1a9bd9a3c8feceb75692d325ebff677635" kindref="member">CAN_F_PRESC_F_SEG_2_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1a795e03158971ecf10966bb256f304aa1" kindref="member">num_seg2</ref><sp/>-<sp/>1U)<sp/>|<sp/><ref refid="HPM6300_2ip_2hpm__can__regs_8h_1ad40c8c1e3485b762bec94cf112a0f28c" kindref="member">CAN_F_PRESC_F_SJW_SET</ref>(param-&gt;<ref refid="structcan__bit__timing__param__t_1a5449778d96223967f55d9bd3eac25256" kindref="member">num_sjw</ref><sp/>-<sp/>1U);</highlight></codeline>
<codeline lineno="851"><highlight class="normal">}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1gace01a30f4853415ffd8a46a69eef1921" kindref="member">can_set_bit_timing</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/><ref refid="group__can__interface_1ga262601289513f1abac3f06d2f55bc624" kindref="member">can_bit_timing_option_t</ref><sp/>option,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>src_clk_freq,<sp/>uint32_t<sp/>baudrate,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>samplepoint_min,<sp/>uint16_t<sp/>samplepoint_max);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga3a8c46558825c0463a50618161351de4" kindref="member">can_calculate_bit_timing</ref>(uint32_t<sp/>src_clk_freq,<sp/><ref refid="group__can__interface_1ga262601289513f1abac3f06d2f55bc624" kindref="member">can_bit_timing_option_t</ref><sp/>option,<sp/>uint32_t<sp/>baudrate,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>samplepoint_min,<sp/>uint16_t<sp/>samplepoint_max,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structcan__bit__timing__param__t" kindref="compound">can_bit_timing_param_t</ref><sp/>*timing_param);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1gae03b8c0387b3a0867505f5781ae35214" kindref="member">can_set_filter</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structcan__filter__config__t" kindref="compound">can_filter_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga111b83df5cafa16889865acef42097a6" kindref="member">can_send_message_blocking</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref><sp/>*message);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga4cc3ed8404d5d0340d1d03dd9fca679c" kindref="member">can_send_high_priority_message_blocking</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref><sp/>*message);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga3edf5cdf5a93d28aa629c2bcdac3d9f3" kindref="member">can_send_message_nonblocking</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref><sp/>*message);</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga9a7676e94c3b7d500f85f44c93e44ae9" kindref="member">can_send_high_priority_message_nonblocking</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__can__interface_1gaf4926adb0f6c2361ea40b6a26a108a4d" kindref="member">can_transmit_buf_t</ref><sp/>*message);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga152ceffef9b26071634f3910426156f4" kindref="member">can_receive_message_blocking</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/><ref refid="group__can__interface_1gaead5fa76fd408804e2cd0828a2fe6ecc" kindref="member">can_receive_buf_t</ref><sp/>*message);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__can__interface_1ga064b9c32ea5252b72e35f7bc6b31a4bd" kindref="member">can_read_received_message</ref>(<ref refid="structCAN__Type" kindref="compound">CAN_Type</ref><sp/>*base,<sp/><ref refid="group__can__interface_1gaead5fa76fd408804e2cd0828a2fe6ecc" kindref="member">can_receive_buf_t</ref><sp/>*message);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal">}</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HPM_CAN_DRV_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="drivers/inc/hpm_can_drv.h"/>
  </compounddef>
</doxygen>
