<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hpm__pllctlv2__drv_8h" kind="file" language="C++">
    <compoundname>hpm_pllctlv2_drv.h</compoundname>
    <includes refid="hpm__common_8h" local="yes">hpm_common.h</includes>
    <includes local="yes">hpm_soc_feature.h</includes>
    <includes local="yes">hpm_pllctlv2_regs.h</includes>
    <includedby refid="hpm__pllctlv2__drv_8c" local="yes">drivers/src/hpm_pllctlv2_drv.c</includedby>
    <includedby refid="HPM5300_2HPM5301_2hpm__clock__drv_8c" local="yes">soc/HPM5300/HPM5301/hpm_clock_drv.c</includedby>
    <includedby refid="HPM5300_2HPM5361_2hpm__clock__drv_8c" local="yes">soc/HPM5300/HPM5361/hpm_clock_drv.c</includedby>
    <includedby refid="HPM6200_2HPM6280_2hpm__clock__drv_8c" local="yes">soc/HPM6200/HPM6280/hpm_clock_drv.c</includedby>
    <includedby refid="HPM6300_2HPM6360_2hpm__clock__drv_8c" local="yes">soc/HPM6300/HPM6360/hpm_clock_drv.c</includedby>
    <includedby refid="HPM6800_2HPM6880_2hpm__clock__drv_8c" local="yes">soc/HPM6800/HPM6880/hpm_clock_drv.c</includedby>
    <includedby refid="HPM6E00_2HPM6E80_2hpm__clock__drv_8c" local="yes">soc/HPM6E00/HPM6E80/hpm_clock_drv.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="9">
        <label>hpm_pllctlv2_regs.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>hpm_soc_feature.h</label>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_pllctlv2_drv.h</label>
        <link refid="hpm__pllctlv2__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>drivers/src/hpm_pllctlv2_drv.c</label>
        <link refid="hpm__pllctlv2__drv_8c"/>
      </node>
      <node id="3">
        <label>soc/HPM5300/HPM5301/hpm_clock_drv.c</label>
        <link refid="HPM5300_2HPM5301_2hpm__clock__drv_8c"/>
      </node>
      <node id="5">
        <label>soc/HPM6200/HPM6280/hpm_clock_drv.c</label>
        <link refid="HPM6200_2HPM6280_2hpm__clock__drv_8c"/>
      </node>
      <node id="6">
        <label>soc/HPM6300/HPM6360/hpm_clock_drv.c</label>
        <link refid="HPM6300_2HPM6360_2hpm__clock__drv_8c"/>
      </node>
      <node id="4">
        <label>soc/HPM5300/HPM5361/hpm_clock_drv.c</label>
        <link refid="HPM5300_2HPM5361_2hpm__clock__drv_8c"/>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_pllctlv2_drv.h</label>
        <link refid="hpm__pllctlv2__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>soc/HPM6E00/HPM6E80/hpm_clock_drv.c</label>
        <link refid="HPM6E00_2HPM6E80_2hpm__clock__drv_8c"/>
      </node>
      <node id="7">
        <label>soc/HPM6800/HPM6880/hpm_clock_drv.c</label>
        <link refid="HPM6800_2HPM6880_2hpm__clock__drv_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="hpm__pllctlv2__drv_8h_1a238ce1f49e6e964d3b7968950c18c709" prot="public" static="no">
        <name>PLLCTLV2_CLK_SRC_XTAL24M</name>
        <initializer>(0U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="16" column="9" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpm__pllctlv2__drv_8h_1ab565841c392138a2a556df7fb913957c" prot="public" static="no">
        <name>PLLCTLV2_CLK_SRC_IRC24M</name>
        <initializer>(1U)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="17" column="9" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pllctlv2__interface_1ga76d8da3065450fa6315fe202a27045e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool pllctlv2_xtal_is_stable</definition>
        <argsstring>(PLLCTLV2_Type *ptr)</argsstring>
        <name>pllctlv2_xtal_is_stable</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Check if external crystal is stable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if external crystal is stable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="30" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1ga1bd44db6e31fee97f2004326d6fbff01" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool pllctlv2_xtal_is_enabled</definition>
        <argsstring>(PLLCTLV2_Type *ptr)</argsstring>
        <name>pllctlv2_xtal_is_enabled</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Check if external crystal is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if external crystal is enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="40" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gaddb286cc23f63e739ec19820e4af019a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pllctlv2_xtal_set_rampup_time</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint32_t rc24m_cycles)</argsstring>
        <name>pllctlv2_xtal_set_rampup_time</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rc24m_cycles</declname>
        </param>
        <briefdescription>
<para>Set external crystal ramp-up time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rc24m_cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>Cycles of RC24M clock </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="50" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1ga5c800268cd22e9996a0442ba4e93f289" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool pllctlv2_pll_is_stable</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll)</argsstring>
        <name>pllctlv2_pll_is_stable</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <briefdescription>
<para>Check is PLL is stable. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLv2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if PLL is stable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="61" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="61" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gadc6f28103bfebec1d968f914b33d609a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool pllctlv2_pll_is_enabled</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll)</argsstring>
        <name>pllctlv2_pll_is_enabled</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <briefdescription>
<para>Check if PLL is enabled. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if PLL is enabled </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="72" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gaee6fd288109eaf2f1f8aa151880bc712" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pllctlv2_select_reference_clock</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint8_t src)</argsstring>
        <name>pllctlv2_select_reference_clock</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>src</declname>
        </param>
        <briefdescription>
<para>Select the PLL reference clock. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL reference lcock source <itemizedlist>
<listitem><para>0 - XTAL24M </para>
</listitem>
<listitem><para>1 - IRC24M </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="85" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gab41eb08256054a6b3b4bd7a88e8a7e8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pllctlv2_enable_spread_spectrum</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint32_t step, uint32_t stop)</argsstring>
        <name>pllctlv2_enable_spread_spectrum</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>step</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
<para>Enable PLL Spread Spectrum feature. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">step</parametername>
</parameternamelist>
<parameterdescription>
<para>Step of spread spectrum modulator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stop</parametername>
</parameternamelist>
<parameterdescription>
<para>Stop point of spread spectrum modulator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="97" column="6" bodyfile="drivers/src/hpm_pllctlv2_drv.c" bodystart="64" bodyend="80" declfile="drivers/inc/hpm_pllctlv2_drv.h" declline="97" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gaab6e8ae0bcedf38f02b74757d878426e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pllctlv2_disable_spread_spectrum</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll)</argsstring>
        <name>pllctlv2_disable_spread_spectrum</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <briefdescription>
<para>Disable PLL Spread spectrum. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="104" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gabebec54955a8509f7ad01494d47ce189" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pllctlv2_set_pll_lock_time</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint32_t xtal_cycles)</argsstring>
        <name>pllctlv2_set_pll_lock_time</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>xtal_cycles</declname>
        </param>
        <briefdescription>
<para>Set PLL lock time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xtal_cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>external Crystal cycles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="115" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1ga809192d9ce2df1a324af4d42c8e6c05d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void pllctlv2_set_pll_step_time</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint32_t xtal_cycles)</argsstring>
        <name>pllctlv2_set_pll_step_time</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>xtal_cycles</declname>
        </param>
        <briefdescription>
<para>Set PLL step time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">xtal_cycles</parametername>
</parameternamelist>
<parameterdescription>
<para>external Crystal cycles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="126" column="20" bodyfile="drivers/inc/hpm_pllctlv2_drv.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gaff5bb0f3606276e5d4fe2fe52c3cd3d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pllctlv2_set_postdiv</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint8_t div_index, uint8_t div_value)</argsstring>
        <name>pllctlv2_set_postdiv</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>div_index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>div_value</declname>
        </param>
        <briefdescription>
<para>Set PLL Post divider. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">div_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Divider index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">div_value</parametername>
</parameternamelist>
<parameterdescription>
<para>divider value, divider factor is 1 + div_value / 5 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="138" column="6" bodyfile="drivers/src/hpm_pllctlv2_drv.c" bodystart="82" bodyend="89" declfile="drivers/inc/hpm_pllctlv2_drv.h" declline="138" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1ga90b8e7a170d012739f0269169a6e599d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t pllctlv2_set_pll_with_mfi_mfn</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint32_t mfi, uint32_t mfn)</argsstring>
        <name>pllctlv2_set_pll_with_mfi_mfn</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mfi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mfn</declname>
        </param>
        <briefdescription>
<para>Set the PLL via the low-level MFI, MFD and MFN PLL frequency = REF CLOCK * (mfi + 1.0 * mfn / mfd) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mfi</parametername>
</parameternamelist>
<parameterdescription>
<para>MFI value </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mfn</parametername>
</parameternamelist>
<parameterdescription>
<para>MFN value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>some parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>operation is successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="150" column="12" bodyfile="drivers/src/hpm_pllctlv2_drv.c" bodystart="21" bodyend="37" declfile="drivers/inc/hpm_pllctlv2_drv.h" declline="150" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1gacf2349e8337f2c07b70b4185a4c678f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t pllctlv2_init_pll_with_freq</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint32_t freq_in_hz)</argsstring>
        <name>pllctlv2_init_pll_with_freq</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>freq_in_hz</declname>
        </param>
        <briefdescription>
<para>Initialize PLL to specified frequency Note: the specified PLL clock needs to be enabled before being configured. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">freq_in_hz</parametername>
</parameternamelist>
<parameterdescription>
<para>expected PLL frequency </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status_invalid_argument</parametername>
</parameternamelist>
<parameterdescription>
<para>some parameters are invalid </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>status_success</parametername>
</parameternamelist>
<parameterdescription>
<para>operation is successful </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; PLLCTLV2 PLL MFN Factor</para>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="161" column="12" bodyfile="drivers/src/hpm_pllctlv2_drv.c" bodystart="39" bodyend="62" declfile="drivers/inc/hpm_pllctlv2_drv.h" declline="161" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1ga5da82012c20e61d57c4eb25d07eec48b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pllctlv2_get_pll_freq_in_hz</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll)</argsstring>
        <name>pllctlv2_get_pll_freq_in_hz</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <briefdescription>
<para>Get the specified PLl clock frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PLL frequency in Hz </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="169" column="10" bodyfile="drivers/src/hpm_pllctlv2_drv.c" bodystart="91" bodyend="101" declfile="drivers/inc/hpm_pllctlv2_drv.h" declline="169" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__pllctlv2__interface_1ga17dbea12fc6c2bccb279beead41018a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t pllctlv2_get_pll_postdiv_freq_in_hz</definition>
        <argsstring>(PLLCTLV2_Type *ptr, uint8_t pll, uint8_t div_index)</argsstring>
        <name>pllctlv2_get_pll_postdiv_freq_in_hz</name>
        <param>
          <type><ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>pll</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>div_index</declname>
        </param>
        <briefdescription>
<para>Get the selected PLL post divider frequency. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PLLCTLV2 base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pll</parametername>
</parameternamelist>
<parameterdescription>
<para>PLL index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">div_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Post divider index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PLL frequency in Hz </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_pllctlv2_drv.h" line="178" column="10" bodyfile="drivers/src/hpm_pllctlv2_drv.c" bodystart="103" bodyend="113" declfile="drivers/inc/hpm_pllctlv2_drv.h" declline="178" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022-2024<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_PLLCTLV2_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_PLLCTLV2_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__common_8h" kindref="compound">hpm_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_soc_feature.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_pllctlv2_regs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16" refid="hpm__pllctlv2__drv_8h_1a238ce1f49e6e964d3b7968950c18c709" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PLLCTLV2_CLK_SRC_XTAL24M<sp/>(0U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="hpm__pllctlv2__drv_8h_1ab565841c392138a2a556df7fb913957c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PLLCTLV2_CLK_SRC_IRC24M<sp/>(1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="group__pllctlv2__interface_1ga76d8da3065450fa6315fe202a27045e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1ga76d8da3065450fa6315fe202a27045e2" kindref="member">pllctlv2_xtal_is_stable</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gae1eae6c44712583303b6e650a21d4875" kindref="member">IS_HPM_BITMASK_SET</ref>(ptr-&gt;<ref refid="structPLLCTLV2__Type_1a82cf013d6273502a03d96ff8c9b45661" kindref="member">XTAL</ref>,<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1a0ee99043c9eb5089400764bbcfb465a7" kindref="member">PLLCTLV2_XTAL_RESPONSE_MASK</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__pllctlv2__interface_1ga1bd44db6e31fee97f2004326d6fbff01" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1ga1bd44db6e31fee97f2004326d6fbff01" kindref="member">pllctlv2_xtal_is_enabled</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr)</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gae1eae6c44712583303b6e650a21d4875" kindref="member">IS_HPM_BITMASK_SET</ref>(ptr-&gt;<ref refid="structPLLCTLV2__Type_1a82cf013d6273502a03d96ff8c9b45661" kindref="member">XTAL</ref>,<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1af5e12bf5e3e3a8b4ae2150cb56248ba3" kindref="member">PLLCTLV2_XTAL_ENABLE_MASK</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="group__pllctlv2__interface_1gaddb286cc23f63e739ec19820e4af019a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1gaddb286cc23f63e739ec19820e4af019a" kindref="member">pllctlv2_xtal_set_rampup_time</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/>rc24m_cycles)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPLLCTLV2__Type_1a82cf013d6273502a03d96ff8c9b45661" kindref="member">XTAL</ref><sp/>=<sp/>(ptr-&gt;<ref refid="structPLLCTLV2__Type_1a82cf013d6273502a03d96ff8c9b45661" kindref="member">XTAL</ref><sp/>&amp;<sp/>~<ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1ac498bf4fb35d0fea104c603987212f40" kindref="member">PLLCTLV2_XTAL_RAMP_TIME_MASK</ref>)<sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1aeef0e8e031f1393c10c3e2a42a0835b1" kindref="member">PLLCTLV2_XTAL_RAMP_TIME_SET</ref>(rc24m_cycles);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__pllctlv2__interface_1ga5c800268cd22e9996a0442ba4e93f289" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1ga5c800268cd22e9996a0442ba4e93f289" kindref="member">pllctlv2_pll_is_stable</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gae1eae6c44712583303b6e650a21d4875" kindref="member">IS_HPM_BITMASK_SET</ref>(ptr-&gt;<ref refid="structPLLCTLV2__Type_1a08ac341ee2d3a0708ff02b30a6ebeb50" kindref="member">PLL</ref>[pll].<ref refid="structPLLCTLV2__Type_1a9ff6a1d6505124147c1f4e4be4ef40f8" kindref="member">MFI</ref>,<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1aa13a275e20704976d323eed123fb43d3" kindref="member">PLLCTLV2_PLL_MFI_RESPONSE_MASK</ref>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="group__pllctlv2__interface_1gadc6f28103bfebec1d968f914b33d609a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1gadc6f28103bfebec1d968f914b33d609a" kindref="member">pllctlv2_pll_is_enabled</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1gae1eae6c44712583303b6e650a21d4875" kindref="member">IS_HPM_BITMASK_SET</ref>(ptr-&gt;<ref refid="structPLLCTLV2__Type_1a08ac341ee2d3a0708ff02b30a6ebeb50" kindref="member">PLL</ref>[pll].<ref refid="structPLLCTLV2__Type_1a9ff6a1d6505124147c1f4e4be4ef40f8" kindref="member">MFI</ref>,<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1a67c83176afb8bb3a7bf6f5ca0f4cea57" kindref="member">PLLCTLV2_PLL_MFI_ENABLE_MASK</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="group__pllctlv2__interface_1gaee6fd288109eaf2f1f8aa151880bc712" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1gaee6fd288109eaf2f1f8aa151880bc712" kindref="member">pllctlv2_select_reference_clock</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/>uint8_t<sp/>src)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPLLCTLV2__Type_1a08ac341ee2d3a0708ff02b30a6ebeb50" kindref="member">PLL</ref>[pll].<ref refid="structPLLCTLV2__Type_1a0cc95eef60c5f732934ab2ab0a1dad12" kindref="member">CONFIG</ref><sp/>=<sp/>(ptr-&gt;<ref refid="structPLLCTLV2__Type_1a08ac341ee2d3a0708ff02b30a6ebeb50" kindref="member">PLL</ref>[pll].<ref refid="structPLLCTLV2__Type_1a0cc95eef60c5f732934ab2ab0a1dad12" kindref="member">CONFIG</ref><sp/>&amp;<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1a5623b10576d1728880c68d27d58b10af" kindref="member">PLLCTLV2_PLL_CONFIG_REFSEL_MASK</ref>)<sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1af8ea0d35fd3bf70792b49b320b34c931" kindref="member">PLLCTLV2_PLL_CONFIG_REFSEL_SET</ref>(src);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1gab41eb08256054a6b3b4bd7a88e8a7e8d" kindref="member">pllctlv2_enable_spread_spectrum</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/>uint32_t<sp/>step,<sp/>uint32_t<sp/>stop);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="group__pllctlv2__interface_1gaab6e8ae0bcedf38f02b74757d878426e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1gaab6e8ae0bcedf38f02b74757d878426e" kindref="member">pllctlv2_disable_spread_spectrum</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPLLCTLV2__Type_1a08ac341ee2d3a0708ff02b30a6ebeb50" kindref="member">PLL</ref>[pll].<ref refid="structPLLCTLV2__Type_1a0cc95eef60c5f732934ab2ab0a1dad12" kindref="member">CONFIG</ref><sp/>&amp;=<sp/>~<ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1a7a3ea063b1681df00dedf8e7b5322a75" kindref="member">PLLCTLV2_PLL_CONFIG_SPREAD_MASK</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="group__pllctlv2__interface_1gabebec54955a8509f7ad01494d47ce189" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1gabebec54955a8509f7ad01494d47ce189" kindref="member">pllctlv2_set_pll_lock_time</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/>uint32_t<sp/>xtal_cycles)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPLLCTLV2__Type_1a08ac341ee2d3a0708ff02b30a6ebeb50" kindref="member">PLL</ref>[pll].<ref refid="structPLLCTLV2__Type_1ae094aeda9d3b91509703d83a84121c4e" kindref="member">LOCKTIME</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1abd8253e35c37d121ff44be8ce4b20800" kindref="member">PLLCTLV2_PLL_LOCKTIME_LOCKTIME_SET</ref>(xtal_cycles);</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="group__pllctlv2__interface_1ga809192d9ce2df1a324af4d42c8e6c05d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1ga809192d9ce2df1a324af4d42c8e6c05d" kindref="member">pllctlv2_set_pll_step_time</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/>uint32_t<sp/>xtal_cycles)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPLLCTLV2__Type_1a08ac341ee2d3a0708ff02b30a6ebeb50" kindref="member">PLL</ref>[pll].<ref refid="structPLLCTLV2__Type_1a891a9e53109e983409b992d930223bec" kindref="member">STEPTIME</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__pllctlv2__regs_8h_1aa9f5fa7f449128bd3553e06398971522" kindref="member">PLLCTLV2_PLL_STEPTIME_STEPTIME_SET</ref>(xtal_cycles);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__pllctlv2__interface_1gaff5bb0f3606276e5d4fe2fe52c3cd3d2" kindref="member">pllctlv2_set_postdiv</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/><sp/>uint8_t<sp/>div_index,<sp/>uint8_t<sp/>div_value);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__pllctlv2__interface_1ga90b8e7a170d012739f0269169a6e599d" kindref="member">pllctlv2_set_pll_with_mfi_mfn</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/><sp/>uint32_t<sp/>mfi,<sp/>uint32_t<sp/>mfn);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__pllctlv2__interface_1gacf2349e8337f2c07b70b4185a4c678f1" kindref="member">pllctlv2_init_pll_with_freq</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/>uint32_t<sp/>freq_in_hz);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">uint32_t<sp/><ref refid="group__pllctlv2__interface_1ga5da82012c20e61d57c4eb25d07eec48b" kindref="member">pllctlv2_get_pll_freq_in_hz</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal">uint32_t<sp/><ref refid="group__pllctlv2__interface_1ga17dbea12fc6c2bccb279beead41018a5" kindref="member">pllctlv2_get_pll_postdiv_freq_in_hz</ref>(<ref refid="structPLLCTLV2__Type" kindref="compound">PLLCTLV2_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>pll,<sp/>uint8_t<sp/>div_index);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HPM_PLLCTLV2_DRV_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="drivers/inc/hpm_pllctlv2_drv.h"/>
  </compounddef>
</doxygen>
