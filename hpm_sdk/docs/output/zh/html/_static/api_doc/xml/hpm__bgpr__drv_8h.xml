<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hpm__bgpr__drv_8h" kind="file" language="C++">
    <compoundname>hpm_bgpr_drv.h</compoundname>
    <includes refid="hpm__common_8h" local="yes">hpm_common.h</includes>
    <includes local="yes">hpm_soc_feature.h</includes>
    <includes local="yes">hpm_bgpr_regs.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_bgpr_drv.h</label>
        <link refid="hpm__bgpr__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>hpm_bgpr_regs.h</label>
      </node>
      <node id="8">
        <label>hpm_soc_feature.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__bgpr__interfaces_1ga45981edceaec0141cab465305f871c56" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t bgpr_read32</definition>
        <argsstring>(BGPR_Type *ptr, uint8_t bgpr_index, uint32_t *bgpr_val)</argsstring>
        <name>bgpr_read32</name>
        <param>
          <type><ref refid="structBGPR__Type" kindref="compound">BGPR_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bgpr_index</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>bgpr_val</declname>
        </param>
        <briefdescription>
<para>read BGPR value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the bgpr_index range is 0 ~ (GPR count of BGPR - 1)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>BGPR base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bgpr_index</parametername>
</parameternamelist>
<parameterdescription>
<para>BGPR GPR index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bgpr_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the BGPR GPR value pointer</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hpm_stat_t status_success if read bgpr without any error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_bgpr_drv.h" line="38" column="26" bodyfile="drivers/inc/hpm_bgpr_drv.h" bodystart="38" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__bgpr__interfaces_1ga816082d041ec1dcd9a614852dba7faac" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>static hpm_stat_t bgpr_write32</definition>
        <argsstring>(BGPR_Type *ptr, uint8_t bgpr_index, uint32_t bgpr_val)</argsstring>
        <name>bgpr_write32</name>
        <param>
          <type><ref refid="structBGPR__Type" kindref="compound">BGPR_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>bgpr_index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>bgpr_val</declname>
        </param>
        <briefdescription>
<para>write BGPR value </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>the bgpr_index range is 0 ~ (GPR count of BGPR - 1)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>BGPR base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bgpr_index</parametername>
</parameternamelist>
<parameterdescription>
<para>BGPR GPR index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bgpr_val</parametername>
</parameternamelist>
<parameterdescription>
<para>the BGPR GPR value</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hpm_stat_t status_success if write bgpr without any error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_bgpr_drv.h" line="60" column="26" bodyfile="drivers/inc/hpm_bgpr_drv.h" bodystart="60" bodyend="69"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2023<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_BGPR_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_BGPR_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__common_8h" kindref="compound">hpm_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_soc_feature.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_bgpr_regs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="group__bgpr__interfaces_1ga45981edceaec0141cab465305f871c56" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__bgpr__interfaces_1ga45981edceaec0141cab465305f871c56" kindref="member">bgpr_read32</ref>(<ref refid="structBGPR__Type" kindref="compound">BGPR_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>bgpr_index,<sp/>uint32_t<sp/>*bgpr_val)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1ggaae05225933a42f81e7c4a9fb286596f9a380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>gpr_count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ptr-&gt;<ref refid="structBGPR__Type_1aad9e52def5d456cdfe8f1e6f93c32b35" kindref="member">GPR</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bgpr_index<sp/>&lt;<sp/>gpr_count)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*bgpr_val)<sp/>=<sp/>ptr-&gt;<ref refid="structBGPR__Type_1aad9e52def5d456cdfe8f1e6f93c32b35" kindref="member">GPR</ref>[bgpr_index];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1ggaae05225933a42f81e7c4a9fb286596f9a99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group__bgpr__interfaces_1ga816082d041ec1dcd9a614852dba7faac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__bgpr__interfaces_1ga816082d041ec1dcd9a614852dba7faac" kindref="member">bgpr_write32</ref>(<ref refid="structBGPR__Type" kindref="compound">BGPR_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>bgpr_index,<sp/>uint32_t<sp/>bgpr_val)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1ggaae05225933a42f81e7c4a9fb286596f9a380c9b8304ad8399f1be634d6f5c4701" kindref="member">status_invalid_argument</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>gpr_count<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ptr-&gt;<ref refid="structBGPR__Type_1aad9e52def5d456cdfe8f1e6f93c32b35" kindref="member">GPR</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(uint32_t);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bgpr_index<sp/>&lt;<sp/>gpr_count)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structBGPR__Type_1aad9e52def5d456cdfe8f1e6f93c32b35" kindref="member">GPR</ref>[bgpr_index]<sp/>=<sp/>bgpr_val;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stat<sp/>=<sp/><ref refid="group__common__interface_1ggaae05225933a42f81e7c4a9fb286596f9a99d8737a9b635c0c9d87d7ac65801ce7" kindref="member">status_success</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stat;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__cplusplus)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__cplusplus<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="drivers/inc/hpm_bgpr_drv.h"/>
  </compounddef>
</doxygen>
