<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hpm__ppi__drv_8h" kind="file" language="C++">
    <compoundname>hpm_ppi_drv.h</compoundname>
    <includes refid="hpm__common_8h" local="yes">hpm_common.h</includes>
    <includes local="yes">hpm_soc_ip_feature.h</includes>
    <includes refid="hpm__ppi__regs_8h" local="yes">hpm_ppi_regs.h</includes>
    <includedby refid="hpm__ppi__drv_8c" local="yes">drivers/src/hpm_ppi_drv.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="9">
        <label>hpm_ppi_regs.h</label>
        <link refid="hpm__ppi__regs_8h"/>
      </node>
      <node id="8">
        <label>hpm_soc_ip_feature.h</label>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_ppi_drv.h</label>
        <link refid="hpm__ppi__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>drivers/src/hpm_ppi_drv.c</label>
        <link refid="hpm__ppi__drv_8c"/>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_ppi_drv.h</label>
        <link refid="hpm__ppi__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structppi__clk__pin__config__t" prot="public">ppi_clk_pin_config_t</innerclass>
    <innerclass refid="structppi__cs__pin__config__t" prot="public">ppi_cs_pin_config_t</innerclass>
    <innerclass refid="structppi__cmd__config__t" prot="public">ppi_cmd_config_t</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__ppi__interface_1ga602bc85dfd50b5248a76631452782bae" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_cs_idle_polarity_t</name>
        <enumvalue id="group__ppi__interface_1gga602bc85dfd50b5248a76631452782baeae3f022372232883ba1d94be1d245ca24" prot="public">
          <name>ppi_cs_idle_pol_low</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1gga602bc85dfd50b5248a76631452782baea7fdd16caf820a739a32fb552e5e6a7be" prot="public">
          <name>ppi_cs_idle_pol_high</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>cs pin idle polarity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="26" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="26" bodyend="29"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1ga0e5080bcfcb229235db8e41dc5f80402" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_dm_valid_polarity_t</name>
        <enumvalue id="group__ppi__interface_1gga0e5080bcfcb229235db8e41dc5f80402a82dbd67e064d04ab9b3091f377851125" prot="public">
          <name>ppi_dm_valid_pol_high</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1gga0e5080bcfcb229235db8e41dc5f80402aa47b824a04b69332ec2e84b779ac613b" prot="public">
          <name>ppi_dm_valid_pol_low</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>dm pin valid polarity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="35" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1gafa64bf8abeccda20dd374f81c26367b0" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_ctrl_polarity_t</name>
        <enumvalue id="group__ppi__interface_1ggafa64bf8abeccda20dd374f81c26367b0af5f5718d8d39fce51529158286a86e7b" prot="public">
          <name>ppi_ctrl_pol_low</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1ggafa64bf8abeccda20dd374f81c26367b0a3caf647e499df9db4c974b0991aa59fe" prot="public">
          <name>ppi_ctrl_pol_high</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ctrl pin polarity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="44" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1ga83352ffe57452c76187f757b3a1d66b2" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_ctrl_pin_dir_t</name>
        <enumvalue id="group__ppi__interface_1gga83352ffe57452c76187f757b3a1d66b2a47b99cc9fa035d458b38a85ed3d33c74" prot="public">
          <name>ppi_ctrl_pin_dir_input</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1gga83352ffe57452c76187f757b3a1d66b2a4e376a2b6c04c4413e74d4b5be0d0daa" prot="public">
          <name>ppi_ctrl_pin_dir_output</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ctrl pin direction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="53" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1ga04ee76d77891ff2dbfeb41f72764244b" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_clk_output_mode_t</name>
        <enumvalue id="group__ppi__interface_1gga04ee76d77891ff2dbfeb41f72764244baccd7cec28732baf3dbb9dd27195bc3fc" prot="public">
          <name>ppi_clk_output_by_cmd_clk_output</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1gga04ee76d77891ff2dbfeb41f72764244ba7ed32e98f9e18bb7bdbaed2254ffd5ab" prot="public">
          <name>ppi_clk_always_output</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>clock pin output mode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="62" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_irq_mask_t</name>
        <enumvalue id="group__ppi__interface_1gga8122c6889df4785f5f717ad6d16967b0a6601a79014048468265739c2f52349df" prot="public">
          <name>ppi_irq_tm_out_mask</name>
          <initializer>= PPI_IRQ_EN_IRQ_TMOUT_EN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>irq mask </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="71" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1ga27ca0208e6c362768733c06931e9f262" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_port_size_t</name>
        <enumvalue id="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262ad0b2da5c80caf90bcd6452767a6fd786" prot="public">
          <name>ppi_port_size_8bits</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262ac8aeb4bcef75c44edbff1e7eee8d41bd" prot="public">
          <name>ppi_port_size_16bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262acfcf37fbfa3a6fbddcce6e48ed02bf69" prot="public">
          <name>ppi_port_size_32bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>port size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="79" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="79" bodyend="83"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1gaa42660f7b84b2b3baff1d68490f0317b" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_byte_sel_t</name>
        <enumvalue id="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba3864bf657b09712bebdb0f72aaa71248" prot="public">
          <name>ppi_byte_sel_0_7_bits</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba753d8b582f9faf47d45d5baeb0566fca" prot="public">
          <name>ppi_byte_sel_8_15_bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba014ebef132809191f51d51b9a8a1b4ae" prot="public">
          <name>ppi_byte_sel_16_23_bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317baf58be88c25d3018c3a96736dd1b2326f" prot="public">
          <name>ppi_byte_sel_24_31_bits</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>cmd byte select </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="89" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="89" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1gab3325eea3a77e1ae29dcdbb682205474" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_ad_func_t</name>
        <enumvalue id="group__ppi__interface_1ggab3325eea3a77e1ae29dcdbb682205474abbae11657cdd8ec3df28627fda114de3" prot="public">
          <name>ppi_ad_func_data</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1ggab3325eea3a77e1ae29dcdbb682205474ac3ea02ee1c67ba36ab5c3228dc08e9bc" prot="public">
          <name>ppi_ad_func_addr</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>cmd address and data function </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="100" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="group__ppi__interface_1ga8a91e368a8473a1b77ddd89724e75338" prot="public" static="no" strong="no">
        <type></type>
        <name>ppi_ad_pin_dir_t</name>
        <enumvalue id="group__ppi__interface_1gga8a91e368a8473a1b77ddd89724e75338a559921c8cf05e165075bbd7b2688c661" prot="public">
          <name>ppi_ad_pin_dir_output</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ppi__interface_1gga8a91e368a8473a1b77ddd89724e75338ae164aa9eba013512bbc61404ae218632" prot="public">
          <name>ppi_ad_pin_dir_input</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>cmd address and data pins direction </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="109" column="1" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="109" bodyend="112"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ppi__interface_1gaba5af71b3401e5eddb8ecc91f087e35e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_set_reset</definition>
        <argsstring>(PPI_Type *ppi, bool reset)</argsstring>
        <name>ppi_set_reset</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>reset</declname>
        </param>
        <briefdescription>
<para>set ppi software reset </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reset</parametername>
</parameternamelist>
<parameterdescription>
<para>true - software reset; false - normal work. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="175" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="175" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga762681c9237b94f17d439f1599c847f4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_config_cs_pin_polarity</definition>
        <argsstring>(PPI_Type *ppi, uint8_t index, ppi_cs_idle_polarity_t pol)</argsstring>
        <name>ppi_config_cs_pin_polarity</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__ppi__interface_1ga602bc85dfd50b5248a76631452782bae" kindref="member">ppi_cs_idle_polarity_t</ref></type>
          <declname>pol</declname>
        </param>
        <briefdescription>
<para>config cs pin work valid polarity </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>cs pin index, value: 0 - 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pol</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__ppi__interface_1ga602bc85dfd50b5248a76631452782bae" kindref="member">ppi_cs_idle_polarity_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="191" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="191" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga1eaef44954256ff54eb4cce568f5ed15" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_config_dm_pin_polarity</definition>
        <argsstring>(PPI_Type *ppi, uint8_t index, ppi_dm_valid_polarity_t pol)</argsstring>
        <name>ppi_config_dm_pin_polarity</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__ppi__interface_1ga0e5080bcfcb229235db8e41dc5f80402" kindref="member">ppi_dm_valid_polarity_t</ref></type>
          <declname>pol</declname>
        </param>
        <briefdescription>
<para>config dm pin work polarity </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>If has HPM_IP_FEATURE_PPI_DM_POLARITY_EACH_CS feature, this is cs pin index, value: 0 - 3. Else, not use. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pol</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__ppi__interface_1ga0e5080bcfcb229235db8e41dc5f80402" kindref="member">ppi_dm_valid_polarity_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="204" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="204" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga2445f52d1cd9dcaa631de467139a09a8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_config_ctrl_pin_polarity</definition>
        <argsstring>(PPI_Type *ppi, uint8_t index, ppi_ctrl_polarity_t pol)</argsstring>
        <name>ppi_config_ctrl_pin_polarity</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__ppi__interface_1gafa64bf8abeccda20dd374f81c26367b0" kindref="member">ppi_ctrl_polarity_t</ref></type>
          <declname>pol</declname>
        </param>
        <briefdescription>
<para>config ctrl pin work polarity, output and input ctrl pin polarity has different meaning </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Ctrl pin index, value: 0 - 7 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pol</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__ppi__interface_1gafa64bf8abeccda20dd374f81c26367b0" kindref="member">ppi_ctrl_polarity_t</ref> [1] Output: ppi_ctrl_pol_low is output the value in cmd; ppi_ctrl_pol_high is output reversed value in cmd. [2] Input: ppi_ctrl_pol_low is input low valid; ppi_ctrl_pol_high is input high valid. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="228" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1gaffd42006a7edfa661f9b509e779fc11d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_set_ctrl_pin_dir</definition>
        <argsstring>(PPI_Type *ppi, uint8_t index, ppi_ctrl_pin_dir_t dir)</argsstring>
        <name>ppi_set_ctrl_pin_dir</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__ppi__interface_1ga83352ffe57452c76187f757b3a1d66b2" kindref="member">ppi_ctrl_pin_dir_t</ref></type>
          <declname>dir</declname>
        </param>
        <briefdescription>
<para>set ctrl pin direction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Ctrl pin index, value: 0 - 7 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dir</parametername>
</parameternamelist>
<parameterdescription>
<para>Ctrl pin direction, <ref refid="group__ppi__interface_1ga83352ffe57452c76187f757b3a1d66b2" kindref="member">ppi_ctrl_pin_dir_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="241" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="241" bodyend="245"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1gabd56ce9b55f58777941d51312ef757e2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_config_timeout</definition>
        <argsstring>(PPI_Type *ppi, uint16_t timeout_cnt, bool enable)</argsstring>
        <name>ppi_config_timeout</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>timeout_cnt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
<para>config timeout </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeout_cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout counter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true - enable; false - disable </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="254" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1gab7526ef6af81e09290312cd534e8c14b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_set_irq_enable</definition>
        <argsstring>(PPI_Type *ppi, uint32_t mask)</argsstring>
        <name>ppi_set_irq_enable</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>set irq enable </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>irq mask, <ref refid="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" kindref="member">ppi_irq_mask_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="265" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga45e98292be186ab65a7750602ca1855a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_set_irq_disable</definition>
        <argsstring>(PPI_Type *ppi, uint32_t mask)</argsstring>
        <name>ppi_set_irq_disable</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>set irq disable </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>irq mask, <ref refid="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" kindref="member">ppi_irq_mask_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="276" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="276" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga42779ec0dadc2fdeeca265b2d3bd9cd3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ppi_get_irq_enable_status</definition>
        <argsstring>(PPI_Type *ppi)</argsstring>
        <name>ppi_get_irq_enable_status</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <briefdescription>
<para>get irq enable status </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>enable status, <ref refid="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" kindref="member">ppi_irq_mask_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="287" column="24" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="287" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1gad1cb0f7071a6d74c9002bddaeaa916cc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ppi_get_irq_status</definition>
        <argsstring>(PPI_Type *ppi)</argsstring>
        <name>ppi_get_irq_status</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <briefdescription>
<para>get irq status </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>irq</parametername>
</parameternamelist>
<parameterdescription>
<para>status, <ref refid="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" kindref="member">ppi_irq_mask_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="298" column="24" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="298" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga3912b630f108eedc7b9be9327fdf7ec1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_clear_irq_flag</definition>
        <argsstring>(PPI_Type *ppi, uint32_t mask)</argsstring>
        <name>ppi_clear_irq_flag</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>clear irq flag </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>irq mask, <ref refid="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" kindref="member">ppi_irq_mask_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="309" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="309" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga385801d4e22b0aa6c645b216c954c721" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_set_clk_pin_enable</definition>
        <argsstring>(PPI_Type *ppi)</argsstring>
        <name>ppi_set_clk_pin_enable</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <briefdescription>
<para>set clk pin enable </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="319" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="319" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga7ae45c162b82e17b7506529b6461b55b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ppi_set_clk_pin_disable</definition>
        <argsstring>(PPI_Type *ppi)</argsstring>
        <name>ppi_set_clk_pin_disable</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <briefdescription>
<para>set clk pin disable </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="329" column="20" bodyfile="drivers/inc/hpm_ppi_drv.h" bodystart="329" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga9894281efba060a92e915a6b0f3edd93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ppi_config_clk_pin</definition>
        <argsstring>(PPI_Type *ppi, ppi_clk_pin_config_t *config)</argsstring>
        <name>ppi_config_clk_pin</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type><ref refid="structppi__clk__pin__config__t" kindref="compound">ppi_clk_pin_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>config clock pin output </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>clock pin config structure pointer, <ref refid="structppi__clk__pin__config__t" kindref="compound">ppi_clk_pin_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="340" column="6" bodyfile="drivers/src/hpm_ppi_drv.c" bodystart="10" bodyend="22" declfile="drivers/inc/hpm_ppi_drv.h" declline="340" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga6b274fda7dbfab8459b7c021d3becf62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ppi_config_cs_pin</definition>
        <argsstring>(PPI_Type *ppi, uint8_t index, ppi_cs_pin_config_t *config)</argsstring>
        <name>ppi_config_cs_pin</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structppi__cs__pin__config__t" kindref="compound">ppi_cs_pin_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>config cs pin </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>cs pin index, value: 0 - 3 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>cs pin config structure pointer, <ref refid="structppi__cs__pin__config__t" kindref="compound">ppi_cs_pin_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="349" column="6" bodyfile="drivers/src/hpm_ppi_drv.c" bodystart="24" bodyend="67" declfile="drivers/inc/hpm_ppi_drv.h" declline="349" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ppi__interface_1ga808e1a49e64215249ed068555bf35ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ppi_config_cmd</definition>
        <argsstring>(PPI_Type *ppi, uint8_t index, ppi_cmd_config_t *config)</argsstring>
        <name>ppi_config_cmd</name>
        <param>
          <type><ref refid="structPPI__Type" kindref="compound">PPI_Type</ref> *</type>
          <declname>ppi</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structppi__cmd__config__t" kindref="compound">ppi_cmd_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>config cmd </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ppi</parametername>
</parameternamelist>
<parameterdescription>
<para>PPI base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>cmd index, value: 0 - 63 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>cmd config structure pointer, <ref refid="structppi__cmd__config__t" kindref="compound">ppi_cmd_config_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ppi_drv.h" line="358" column="6" bodyfile="drivers/src/hpm_ppi_drv.c" bodystart="69" bodyend="103" declfile="drivers/inc/hpm_ppi_drv.h" declline="358" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2024<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_PPI_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_PPI_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__common_8h" kindref="compound">hpm_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_soc_ip_feature.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__ppi__regs_8h" kindref="compound">hpm_ppi_regs.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="group__ppi__interface_1ga602bc85dfd50b5248a76631452782bae" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27" refid="group__ppi__interface_1gga602bc85dfd50b5248a76631452782baeae3f022372232883ba1d94be1d245ca24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga602bc85dfd50b5248a76631452782baeae3f022372232883ba1d94be1d245ca24" kindref="member">ppi_cs_idle_pol_low</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga602bc85dfd50b5248a76631452782baea7fdd16caf820a739a32fb552e5e6a7be" kindref="member">ppi_cs_idle_pol_high</ref></highlight></codeline>
<codeline lineno="29" refid="group__ppi__interface_1gga602bc85dfd50b5248a76631452782baea7fdd16caf820a739a32fb552e5e6a7be" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1ga602bc85dfd50b5248a76631452782bae" kindref="member">ppi_cs_idle_polarity_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35" refid="group__ppi__interface_1ga0e5080bcfcb229235db8e41dc5f80402" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36" refid="group__ppi__interface_1gga0e5080bcfcb229235db8e41dc5f80402a82dbd67e064d04ab9b3091f377851125" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga0e5080bcfcb229235db8e41dc5f80402a82dbd67e064d04ab9b3091f377851125" kindref="member">ppi_dm_valid_pol_high</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga0e5080bcfcb229235db8e41dc5f80402aa47b824a04b69332ec2e84b779ac613b" kindref="member">ppi_dm_valid_pol_low</ref></highlight></codeline>
<codeline lineno="38" refid="group__ppi__interface_1gga0e5080bcfcb229235db8e41dc5f80402aa47b824a04b69332ec2e84b779ac613b" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1ga0e5080bcfcb229235db8e41dc5f80402" kindref="member">ppi_dm_valid_polarity_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44" refid="group__ppi__interface_1gafa64bf8abeccda20dd374f81c26367b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="45" refid="group__ppi__interface_1ggafa64bf8abeccda20dd374f81c26367b0af5f5718d8d39fce51529158286a86e7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggafa64bf8abeccda20dd374f81c26367b0af5f5718d8d39fce51529158286a86e7b" kindref="member">ppi_ctrl_pol_low</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggafa64bf8abeccda20dd374f81c26367b0a3caf647e499df9db4c974b0991aa59fe" kindref="member">ppi_ctrl_pol_high</ref></highlight></codeline>
<codeline lineno="47" refid="group__ppi__interface_1ggafa64bf8abeccda20dd374f81c26367b0a3caf647e499df9db4c974b0991aa59fe" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1gafa64bf8abeccda20dd374f81c26367b0" kindref="member">ppi_ctrl_polarity_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53" refid="group__ppi__interface_1ga83352ffe57452c76187f757b3a1d66b2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="54" refid="group__ppi__interface_1gga83352ffe57452c76187f757b3a1d66b2a47b99cc9fa035d458b38a85ed3d33c74" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga83352ffe57452c76187f757b3a1d66b2a47b99cc9fa035d458b38a85ed3d33c74" kindref="member">ppi_ctrl_pin_dir_input</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="55" refid="group__ppi__interface_1gga83352ffe57452c76187f757b3a1d66b2a4e376a2b6c04c4413e74d4b5be0d0daa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga83352ffe57452c76187f757b3a1d66b2a4e376a2b6c04c4413e74d4b5be0d0daa" kindref="member">ppi_ctrl_pin_dir_output</ref>,</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1ga83352ffe57452c76187f757b3a1d66b2" kindref="member">ppi_ctrl_pin_dir_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="group__ppi__interface_1ga04ee76d77891ff2dbfeb41f72764244b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="63" refid="group__ppi__interface_1gga04ee76d77891ff2dbfeb41f72764244baccd7cec28732baf3dbb9dd27195bc3fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga04ee76d77891ff2dbfeb41f72764244baccd7cec28732baf3dbb9dd27195bc3fc" kindref="member">ppi_clk_output_by_cmd_clk_output</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga04ee76d77891ff2dbfeb41f72764244ba7ed32e98f9e18bb7bdbaed2254ffd5ab" kindref="member">ppi_clk_always_output</ref></highlight></codeline>
<codeline lineno="65" refid="group__ppi__interface_1gga04ee76d77891ff2dbfeb41f72764244ba7ed32e98f9e18bb7bdbaed2254ffd5ab" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1ga04ee76d77891ff2dbfeb41f72764244b" kindref="member">ppi_clk_output_mode_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="72" refid="group__ppi__interface_1gga8122c6889df4785f5f717ad6d16967b0a6601a79014048468265739c2f52349df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga8122c6889df4785f5f717ad6d16967b0a6601a79014048468265739c2f52349df" kindref="member">ppi_irq_tm_out_mask</ref><sp/>=<sp/><ref refid="hpm__ppi__regs_8h_1a9308fd8e95aa22fa1a50723137edc63a" kindref="member">PPI_IRQ_EN_IRQ_TMOUT_EN_MASK</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1ga8122c6889df4785f5f717ad6d16967b0" kindref="member">ppi_irq_mask_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="group__ppi__interface_1ga27ca0208e6c362768733c06931e9f262" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="80" refid="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262ad0b2da5c80caf90bcd6452767a6fd786" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262ad0b2da5c80caf90bcd6452767a6fd786" kindref="member">ppi_port_size_8bits</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="81" refid="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262ac8aeb4bcef75c44edbff1e7eee8d41bd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262ac8aeb4bcef75c44edbff1e7eee8d41bd" kindref="member">ppi_port_size_16bits</ref>,</highlight></codeline>
<codeline lineno="82" refid="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262acfcf37fbfa3a6fbddcce6e48ed02bf69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga27ca0208e6c362768733c06931e9f262acfcf37fbfa3a6fbddcce6e48ed02bf69" kindref="member">ppi_port_size_32bits</ref>,</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1ga27ca0208e6c362768733c06931e9f262" kindref="member">ppi_port_size_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89" refid="group__ppi__interface_1gaa42660f7b84b2b3baff1d68490f0317b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90" refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba3864bf657b09712bebdb0f72aaa71248" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba3864bf657b09712bebdb0f72aaa71248" kindref="member">ppi_byte_sel_0_7_bits</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="91" refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba753d8b582f9faf47d45d5baeb0566fca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba753d8b582f9faf47d45d5baeb0566fca" kindref="member">ppi_byte_sel_8_15_bits</ref>,</highlight></codeline>
<codeline lineno="92" refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba014ebef132809191f51d51b9a8a1b4ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317ba014ebef132809191f51d51b9a8a1b4ae" kindref="member">ppi_byte_sel_16_23_bits</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317baf58be88c25d3018c3a96736dd1b2326f" kindref="member">ppi_byte_sel_24_31_bits</ref></highlight></codeline>
<codeline lineno="94" refid="group__ppi__interface_1ggaa42660f7b84b2b3baff1d68490f0317baf58be88c25d3018c3a96736dd1b2326f" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1gaa42660f7b84b2b3baff1d68490f0317b" kindref="member">ppi_byte_sel_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100" refid="group__ppi__interface_1gab3325eea3a77e1ae29dcdbb682205474" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="101" refid="group__ppi__interface_1ggab3325eea3a77e1ae29dcdbb682205474abbae11657cdd8ec3df28627fda114de3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggab3325eea3a77e1ae29dcdbb682205474abbae11657cdd8ec3df28627fda114de3" kindref="member">ppi_ad_func_data</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ggab3325eea3a77e1ae29dcdbb682205474ac3ea02ee1c67ba36ab5c3228dc08e9bc" kindref="member">ppi_ad_func_addr</ref></highlight></codeline>
<codeline lineno="103" refid="group__ppi__interface_1ggab3325eea3a77e1ae29dcdbb682205474ac3ea02ee1c67ba36ab5c3228dc08e9bc" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1gab3325eea3a77e1ae29dcdbb682205474" kindref="member">ppi_ad_func_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109" refid="group__ppi__interface_1ga8a91e368a8473a1b77ddd89724e75338" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110" refid="group__ppi__interface_1gga8a91e368a8473a1b77ddd89724e75338a559921c8cf05e165075bbd7b2688c661" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga8a91e368a8473a1b77ddd89724e75338a559921c8cf05e165075bbd7b2688c661" kindref="member">ppi_ad_pin_dir_output</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gga8a91e368a8473a1b77ddd89724e75338ae164aa9eba013512bbc61404ae218632" kindref="member">ppi_ad_pin_dir_input</ref></highlight></codeline>
<codeline lineno="112" refid="group__ppi__interface_1gga8a91e368a8473a1b77ddd89724e75338ae164aa9eba013512bbc61404ae218632" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ppi__interface_1ga8a91e368a8473a1b77ddd89724e75338" kindref="member">ppi_ad_pin_dir_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118" refid="structppi__clk__pin__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119" refid="structppi__clk__pin__config__t_1ab98ed0b0ff3affd37c47b5a0240aa2fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__clk__pin__config__t_1ab98ed0b0ff3affd37c47b5a0240aa2fa" kindref="member">cycle_num</ref>;</highlight></codeline>
<codeline lineno="120" refid="structppi__clk__pin__config__t_1aaf10a5219021b5e736b6e0cd3a158a4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__clk__pin__config__t_1aaf10a5219021b5e736b6e0cd3a158a4d" kindref="member">high_num</ref>;</highlight></codeline>
<codeline lineno="121" refid="structppi__clk__pin__config__t_1ac71a8e98e49a25f556bd132ad07f2ee9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__clk__pin__config__t_1ac71a8e98e49a25f556bd132ad07f2ee9" kindref="member">low_num</ref>;</highlight></codeline>
<codeline lineno="122" refid="structppi__clk__pin__config__t_1abd73b0d8c12aac673e1feef3ec686750" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ga04ee76d77891ff2dbfeb41f72764244b" kindref="member">ppi_clk_output_mode_t</ref><sp/><ref refid="structppi__clk__pin__config__t_1abd73b0d8c12aac673e1feef3ec686750" kindref="member">mode</ref>;</highlight></codeline>
<codeline lineno="123" refid="structppi__clk__pin__config__t_1a400c4da285cfd03cf26ce81a89cec276" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structppi__clk__pin__config__t_1a400c4da285cfd03cf26ce81a89cec276" kindref="member">revert</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/><ref refid="structppi__clk__pin__config__t" kindref="compound">ppi_clk_pin_config_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="130" refid="structppi__cs__pin__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131" refid="structppi__cs__pin__config__t_1ac267d490efbd366c738087f070e4d262" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ga27ca0208e6c362768733c06931e9f262" kindref="member">ppi_port_size_t</ref><sp/><ref refid="structppi__cs__pin__config__t_1ac267d490efbd366c738087f070e4d262" kindref="member">port_size</ref>;</highlight></codeline>
<codeline lineno="132" refid="structppi__cs__pin__config__t_1aa209d259623facd8878b5f91cd68c120" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structppi__cs__pin__config__t_1aa209d259623facd8878b5f91cd68c120" kindref="member">addr_start_high_12bits</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>address<sp/>space:<sp/>0xF8000000<sp/>~<sp/>0xFFFFFFFF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="structppi__cs__pin__config__t_1a8147023f5bec55eb084e615bdc46e123" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structppi__cs__pin__config__t_1a8147023f5bec55eb084e615bdc46e123" kindref="member">addr_end_high_12bits</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>address<sp/>space:<sp/>0xF8000000<sp/>~<sp/>0xFFFFFFFF<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="structppi__cs__pin__config__t_1a4010e11d7ca0057cf6b6e765413b91c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structppi__cs__pin__config__t_1a4010e11d7ca0057cf6b6e765413b91c6" kindref="member">addr_mask</ref>;</highlight></codeline>
<codeline lineno="135" refid="structppi__cs__pin__config__t_1a5684bff84d87ed8d2970649725cb8789" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structppi__cs__pin__config__t_1a5684bff84d87ed8d2970649725cb8789" kindref="member">sync_clk_en</ref>;</highlight></codeline>
<codeline lineno="136" refid="structppi__cs__pin__config__t_1acf2dda6a609d10df473c7ebfc8d92832" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1acf2dda6a609d10df473c7ebfc8d92832" kindref="member">sync_clk_sel</ref>;</highlight></codeline>
<codeline lineno="137" refid="structppi__cs__pin__config__t_1a9166811b4f25323d82f5d1b5b166bb24" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1a9166811b4f25323d82f5d1b5b166bb24" kindref="member">interval_cycle</ref>;</highlight></codeline>
<codeline lineno="138" refid="structppi__cs__pin__config__t_1a7589655dad68083acbe4390e45b8532b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1a7589655dad68083acbe4390e45b8532b" kindref="member">rcmd_start0</ref>;</highlight></codeline>
<codeline lineno="139" refid="structppi__cs__pin__config__t_1aa8c4fbe0ae952e6437ef4bbf615fe2d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1aa8c4fbe0ae952e6437ef4bbf615fe2d7" kindref="member">rcmd_end0</ref>;</highlight></codeline>
<codeline lineno="140" refid="structppi__cs__pin__config__t_1a55d7b932cfcd86e320da093299bba2b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1a55d7b932cfcd86e320da093299bba2b9" kindref="member">rcmd_start1</ref>;</highlight></codeline>
<codeline lineno="141" refid="structppi__cs__pin__config__t_1aab80914b9f224c32facd17777199e09f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1aab80914b9f224c32facd17777199e09f" kindref="member">rcmd_end1</ref>;</highlight></codeline>
<codeline lineno="142" refid="structppi__cs__pin__config__t_1ab92f040e7a98b94b91573322838ff941" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1ab92f040e7a98b94b91573322838ff941" kindref="member">wcmd_start0</ref>;</highlight></codeline>
<codeline lineno="143" refid="structppi__cs__pin__config__t_1a82c389ef9511fa9522312c912d169fdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1a82c389ef9511fa9522312c912d169fdc" kindref="member">wcmd_end0</ref>;</highlight></codeline>
<codeline lineno="144" refid="structppi__cs__pin__config__t_1a8baf41e151f636df09d428fa2f370909" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1a8baf41e151f636df09d428fa2f370909" kindref="member">wcmd_start1</ref>;</highlight></codeline>
<codeline lineno="145" refid="structppi__cs__pin__config__t_1a2bc7a8f95b630cb33cbdb8bccf3d391f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cs__pin__config__t_1a2bc7a8f95b630cb33cbdb8bccf3d391f" kindref="member">wcmd_end1</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_IP_FEATURE_PPI_DM_POLARITY_EACH_CS)<sp/>&amp;&amp;<sp/>HPM_IP_FEATURE_PPI_DM_POLARITY_EACH_CS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ga0e5080bcfcb229235db8e41dc5f80402" kindref="member">ppi_dm_valid_polarity_t</ref><sp/>dm_polarity;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}<sp/><ref refid="structppi__cs__pin__config__t" kindref="compound">ppi_cs_pin_config_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155" refid="structppi__cmd__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156" refid="structppi__cmd__config__t_1ae4345e125c607e901c3c491a2c2f17d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structppi__cmd__config__t_1ae4345e125c607e901c3c491a2c2f17d1" kindref="member">cs_pin_value</ref>;</highlight></codeline>
<codeline lineno="157" refid="structppi__cmd__config__t_1a8140fbc6b1082ee877c6c1d337b53f89" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structppi__cmd__config__t_1a8140fbc6b1082ee877c6c1d337b53f89" kindref="member">clk_output</ref>;</highlight></codeline>
<codeline lineno="158" refid="structppi__cmd__config__t_1afd9745182930350f695fe684d8ccc6ca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structppi__cmd__config__t_1afd9745182930350f695fe684d8ccc6ca" kindref="member">cmd_cycle</ref>;</highlight></codeline>
<codeline lineno="159" refid="structppi__cmd__config__t_1a2c3c01dcefce8cf9422e3f16bd48e366" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gab3325eea3a77e1ae29dcdbb682205474" kindref="member">ppi_ad_func_t</ref><sp/>ad_func_sel[4];</highlight></codeline>
<codeline lineno="160" refid="structppi__cmd__config__t_1a75adc6dc11942abe4d0deaae6c98fe35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1ga8a91e368a8473a1b77ddd89724e75338" kindref="member">ppi_ad_pin_dir_t</ref><sp/>ad_pin_dir[4];</highlight></codeline>
<codeline lineno="161" refid="structppi__cmd__config__t_1a6197f3b3dbf2681a46ffbf18e98c4155" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ppi__interface_1gaa42660f7b84b2b3baff1d68490f0317b" kindref="member">ppi_byte_sel_t</ref><sp/>byte_sel[4];</highlight></codeline>
<codeline lineno="162" refid="structppi__cmd__config__t_1afed0d5b20edc0a18f60a7fcc01f65857" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ctrl_pin_value[8];</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}<sp/><ref refid="structppi__cmd__config__t" kindref="compound">ppi_cmd_config_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="group__ppi__interface_1gaba5af71b3401e5eddb8ecc91f087e35e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1gaba5af71b3401e5eddb8ecc91f087e35e" kindref="member">ppi_set_reset</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reset)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reset)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1ab3d94b621dc33454e929cf2733671206" kindref="member">GLB_CFG</ref><sp/>|=<sp/><ref refid="hpm__ppi__regs_8h_1ad563080184335d8426587589e17ce7fa" kindref="member">PPI_GLB_CFG_SOFT_RESET_MASK</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1ab3d94b621dc33454e929cf2733671206" kindref="member">GLB_CFG</ref><sp/>&amp;=<sp/>~<ref refid="hpm__ppi__regs_8h_1ad563080184335d8426587589e17ce7fa" kindref="member">PPI_GLB_CFG_SOFT_RESET_MASK</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="group__ppi__interface_1ga762681c9237b94f17d439f1599c847f4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga762681c9237b94f17d439f1599c847f4" kindref="member">ppi_config_cs_pin_polarity</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint8_t<sp/>index,<sp/><ref refid="group__ppi__interface_1ga602bc85dfd50b5248a76631452782bae" kindref="member">ppi_cs_idle_polarity_t</ref><sp/>pol)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>=<sp/>(ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>&amp;<sp/>~(((1u<sp/>&lt;&lt;<sp/><ref refid="hpm__ppi__regs_8h_1a4250f123148812f2eb10125e61a086ae" kindref="member">PPI_PAD_CFG_CS_IDLE_ST_SHIFT</ref>)<sp/>&lt;&lt;<sp/>index)))<sp/>|<sp/>(((pol<sp/>&lt;&lt;<sp/><ref refid="hpm__ppi__regs_8h_1a4250f123148812f2eb10125e61a086ae" kindref="member">PPI_PAD_CFG_CS_IDLE_ST_SHIFT</ref>)<sp/>&lt;&lt;<sp/>index));</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="group__ppi__interface_1ga1eaef44954256ff54eb4cce568f5ed15" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga1eaef44954256ff54eb4cce568f5ed15" kindref="member">ppi_config_dm_pin_polarity</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint8_t<sp/>index,<sp/><ref refid="group__ppi__interface_1ga0e5080bcfcb229235db8e41dc5f80402" kindref="member">ppi_dm_valid_polarity_t</ref><sp/>pol)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HPM_IP_FEATURE_PPI_DM_POLARITY_EACH_CS)<sp/>&amp;&amp;<sp/>HPM_IP_FEATURE_PPI_DM_POLARITY_EACH_CS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1a0449d51d40a76a38360d8cfea898a6e8" kindref="member">CS</ref>[index].<ref refid="structPPI__Type_1ade8c03ef490ce83da20d82e73136af57" kindref="member">CFG2</ref><sp/>=<sp/>(ppi-&gt;<ref refid="structPPI__Type_1a0449d51d40a76a38360d8cfea898a6e8" kindref="member">CS</ref>[index].<ref refid="structPPI__Type_1ade8c03ef490ce83da20d82e73136af57" kindref="member">CFG2</ref><sp/>&amp;<sp/>~PPI_CS_CFG2_DM_POLARITY_MASK)<sp/>|<sp/>PPI_CS_CFG2_DM_POLARITY_SET(pol);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)index;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pol<sp/>==<sp/><ref refid="group__ppi__interface_1gga0e5080bcfcb229235db8e41dc5f80402a82dbd67e064d04ab9b3091f377851125" kindref="member">ppi_dm_valid_pol_high</ref>)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>&amp;=<sp/>~<ref refid="hpm__ppi__regs_8h_1ae39271e311f8c4356ce8f1d0abc46e6f" kindref="member">PPI_PAD_CFG_DM_PAD_POL_MASK</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>|=<sp/><ref refid="hpm__ppi__regs_8h_1ae39271e311f8c4356ce8f1d0abc46e6f" kindref="member">PPI_PAD_CFG_DM_PAD_POL_MASK</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="group__ppi__interface_1ga2445f52d1cd9dcaa631de467139a09a8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga2445f52d1cd9dcaa631de467139a09a8" kindref="member">ppi_config_ctrl_pin_polarity</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint8_t<sp/>index,<sp/><ref refid="group__ppi__interface_1gafa64bf8abeccda20dd374f81c26367b0" kindref="member">ppi_ctrl_polarity_t</ref><sp/>pol)</highlight></codeline>
<codeline lineno="229"><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>=<sp/>(ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>&amp;<sp/>~(((1u<sp/>&lt;&lt;<sp/><ref refid="hpm__ppi__regs_8h_1add92aa923df2fdc495baaa11bd29c976" kindref="member">PPI_PAD_CFG_CTRL_PAD_POL_SHIFT</ref>)<sp/>&lt;&lt;<sp/>index)))<sp/>|<sp/>(((pol<sp/>&lt;&lt;<sp/><ref refid="hpm__ppi__regs_8h_1add92aa923df2fdc495baaa11bd29c976" kindref="member">PPI_PAD_CFG_CTRL_PAD_POL_SHIFT</ref>)<sp/>&lt;&lt;<sp/>index));</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="group__ppi__interface_1gaffd42006a7edfa661f9b509e779fc11d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1gaffd42006a7edfa661f9b509e779fc11d" kindref="member">ppi_set_ctrl_pin_dir</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint8_t<sp/>index,<sp/><ref refid="group__ppi__interface_1ga83352ffe57452c76187f757b3a1d66b2" kindref="member">ppi_ctrl_pin_dir_t</ref><sp/>dir)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(index<sp/>&lt;<sp/>8);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>=<sp/>(ppi-&gt;<ref refid="structPPI__Type_1ae49e88c0d90ae4c299acb9d62a6e9161" kindref="member">PAD_CFG</ref><sp/>&amp;<sp/>~(((1u<sp/>&lt;&lt;<sp/><ref refid="hpm__ppi__regs_8h_1af48350b4efe57496f8052069db7ddc32" kindref="member">PPI_PAD_CFG_CTRL_PAD_OE_SHIFT</ref>)<sp/>&lt;&lt;<sp/>index)))<sp/>|<sp/>(((dir<sp/>&lt;&lt;<sp/><ref refid="hpm__ppi__regs_8h_1af48350b4efe57496f8052069db7ddc32" kindref="member">PPI_PAD_CFG_CTRL_PAD_OE_SHIFT</ref>)<sp/>&lt;&lt;<sp/>index));</highlight></codeline>
<codeline lineno="245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="group__ppi__interface_1gabd56ce9b55f58777941d51312ef757e2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1gabd56ce9b55f58777941d51312ef757e2" kindref="member">ppi_config_timeout</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint16_t<sp/>timeout_cnt,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enable)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1af2219063d1cfe621a1c89be54afbbe43" kindref="member">TM_CFG</ref><sp/>=<sp/><ref refid="hpm__ppi__regs_8h_1acabcb9b41e71e8369d137d04a491530c" kindref="member">PPI_TM_CFG_TM_CFG_SET</ref>(timeout_cnt)<sp/>|<sp/><ref refid="hpm__ppi__regs_8h_1acf73761898562dcfdd2975b153c4f16d" kindref="member">PPI_TM_CFG_TM_EN_SET</ref>(enable);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="group__ppi__interface_1gab7526ef6af81e09290312cd534e8c14b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1gab7526ef6af81e09290312cd534e8c14b" kindref="member">ppi_set_irq_enable</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="266"><highlight class="normal">{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1a56694ac594665f88da0e200f2d81dd5d" kindref="member">IRQ_EN</ref><sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="group__ppi__interface_1ga45e98292be186ab65a7750602ca1855a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga45e98292be186ab65a7750602ca1855a" kindref="member">ppi_set_irq_disable</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1a56694ac594665f88da0e200f2d81dd5d" kindref="member">IRQ_EN</ref><sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="group__ppi__interface_1ga42779ec0dadc2fdeeca265b2d3bd9cd3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ppi__interface_1ga42779ec0dadc2fdeeca265b2d3bd9cd3" kindref="member">ppi_get_irq_enable_status</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi)</highlight></codeline>
<codeline lineno="288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ppi-&gt;<ref refid="structPPI__Type_1a56694ac594665f88da0e200f2d81dd5d" kindref="member">IRQ_EN</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="group__ppi__interface_1gad1cb0f7071a6d74c9002bddaeaa916cc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ppi__interface_1gad1cb0f7071a6d74c9002bddaeaa916cc" kindref="member">ppi_get_irq_status</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ppi-&gt;<ref refid="structPPI__Type_1a4993ca52e4ba7395d304915a5c8bdf8c" kindref="member">IRQ_STS</ref>;</highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="group__ppi__interface_1ga3912b630f108eedc7b9be9327fdf7ec1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga3912b630f108eedc7b9be9327fdf7ec1" kindref="member">ppi_clear_irq_flag</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1a4993ca52e4ba7395d304915a5c8bdf8c" kindref="member">IRQ_STS</ref><sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="group__ppi__interface_1ga385801d4e22b0aa6c645b216c954c721" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga385801d4e22b0aa6c645b216c954c721" kindref="member">ppi_set_clk_pin_enable</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi)</highlight></codeline>
<codeline lineno="320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1a0fa4a6933ec232d995d7af81d37e12c8" kindref="member">CLKPIN_CFG</ref><sp/>|=<sp/><ref refid="hpm__ppi__regs_8h_1a30225b7c817f4ffce2714026bde39ba3" kindref="member">PPI_CLKPIN_CFG_EN_MASK</ref>;</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="group__ppi__interface_1ga7ae45c162b82e17b7506529b6461b55b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga7ae45c162b82e17b7506529b6461b55b" kindref="member">ppi_set_clk_pin_disable</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>ppi-&gt;<ref refid="structPPI__Type_1a0fa4a6933ec232d995d7af81d37e12c8" kindref="member">CLKPIN_CFG</ref><sp/>&amp;=<sp/>~<ref refid="hpm__ppi__regs_8h_1a30225b7c817f4ffce2714026bde39ba3" kindref="member">PPI_CLKPIN_CFG_EN_MASK</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga9894281efba060a92e915a6b0f3edd93" kindref="member">ppi_config_clk_pin</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/><ref refid="structppi__clk__pin__config__t" kindref="compound">ppi_clk_pin_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga6b274fda7dbfab8459b7c021d3becf62" kindref="member">ppi_config_cs_pin</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint8_t<sp/>index,<sp/><ref refid="structppi__cs__pin__config__t" kindref="compound">ppi_cs_pin_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ppi__interface_1ga808e1a49e64215249ed068555bf35ca7" kindref="member">ppi_config_cmd</ref>(<ref refid="structPPI__Type" kindref="compound">PPI_Type</ref><sp/>*ppi,<sp/>uint8_t<sp/>index,<sp/><ref refid="structppi__cmd__config__t" kindref="compound">ppi_cmd_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HPM_PPI_DRV_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="drivers/inc/hpm_ppi_drv.h"/>
  </compounddef>
</doxygen>
