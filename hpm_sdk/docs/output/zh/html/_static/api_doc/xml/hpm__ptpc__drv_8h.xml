<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hpm__ptpc__drv_8h" kind="file" language="C++">
    <compoundname>hpm_ptpc_drv.h</compoundname>
    <includes refid="hpm__common_8h" local="yes">hpm_common.h</includes>
    <includes local="yes">hpm_ptpc_regs.h</includes>
    <includedby refid="hpm__ptpc__drv_8c" local="yes">drivers/src/hpm_ptpc_drv.c</includedby>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="2">
        <label>hpm_common.h</label>
        <link refid="hpm__common_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>drivers/inc/hpm_ptpc_drv.h</label>
        <link refid="hpm__ptpc__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>string.h</label>
      </node>
      <node id="8">
        <label>hpm_ptpc_regs.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>drivers/inc/hpm_ptpc_drv.h</label>
        <link refid="hpm__ptpc__drv_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>drivers/src/hpm_ptpc_drv.c</label>
        <link refid="hpm__ptpc__drv_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structptpc__config__t" prot="public">ptpc_config_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__ptpc__interface_1ga3e127c5359b9fd8f4bc27bc3874867c5" prot="public" static="no">
        <name>PTPC_EVENT_COMPARE0_MASK</name>
        <initializer><ref refid="HPM6E00_2ip_2hpm__ptpc__regs_8h_1ad5055e7b138e06f81d38a18ff64d0f64" kindref="member">PTPC_INT_STS_COMP_INT_STS0_MASK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="21" column="9" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ptpc__interface_1gac12e7df562e656d4340bc52618d723ae" prot="public" static="no">
        <name>PTPC_EVENT_CAPTURE0_MASK</name>
        <initializer><ref refid="HPM6E00_2ip_2hpm__ptpc__regs_8h_1af3c1b4c34b44b4bf19711c516daa4c0f" kindref="member">PTPC_INT_STS_CAPTURE_INT_STS0_MASK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="22" column="9" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ptpc__interface_1ga6f953eafaff70f7886c5b1223b3a13b3" prot="public" static="no">
        <name>PTPC_EVENT_PPS0_MASK</name>
        <initializer><ref refid="HPM6E00_2ip_2hpm__ptpc__regs_8h_1af5d9c23ba00ae5a0c4b2700f4690f55c" kindref="member">PTPC_INT_STS_PPS_INT_STS0_MASK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="23" column="9" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ptpc__interface_1ga6127282920eafc696bb0b25311abf2b0" prot="public" static="no">
        <name>PTPC_EVENT_COMPARE1_MASK</name>
        <initializer><ref refid="HPM6E00_2ip_2hpm__ptpc__regs_8h_1a20e4173d2afeecb3b42a37f31cd561d3" kindref="member">PTPC_INT_STS_COMP_INT_STS1_MASK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="24" column="9" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ptpc__interface_1ga508789ef654243aa4fd5e49748c8e7e1" prot="public" static="no">
        <name>PTPC_EVENT_CAPTURE1_MASK</name>
        <initializer><ref refid="HPM6E00_2ip_2hpm__ptpc__regs_8h_1a0ec1d2b80c965d5672724f1ada369fc1" kindref="member">PTPC_INT_STS_CAPTURE_INT_STS1_MASK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="25" column="9" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ptpc__interface_1ga3ded3cd5bc3e9638c70d030f5f495ab3" prot="public" static="no">
        <name>PTPC_EVENT_PPS1_MASK</name>
        <initializer><ref refid="HPM6E00_2ip_2hpm__ptpc__regs_8h_1a2d7a8fe9cf4bda90978d8bd347050174" kindref="member">PTPC_INT_STS_PPS_INT_STS1_MASK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="26" column="9" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__ptpc__interface_1ga589b1cb5b621dc251dddf8a69fadfcf9" prot="public" static="no">
        <name>PTPC_MAX_NS_COUNTER</name>
        <initializer>(0x3B9ACA00UL)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="28" column="9" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__ptpc__interface_1ga7e0e0af3677e005f88cd98f6d7564bb4" prot="public" static="no" strong="no">
        <type></type>
        <name>ptpc_ns_counter_rollover_type</name>
        <enumvalue id="group__ptpc__interface_1gga7e0e0af3677e005f88cd98f6d7564bb4aa8d0641dc889e50e876ef2ade7a89b0a" prot="public">
          <name>ptpc_ns_counter_rollover_binary</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>binary mode, resolution ~0.466ns, overflow at 0x7FFFFFFF </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ptpc__interface_1gga7e0e0af3677e005f88cd98f6d7564bb4ad59fe340696bf3e30be66640a20bf5eb" prot="public">
          <name>ptpc_ns_counter_rollover_digital</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>digital mode, resolution 1ns, overflow at 0x3B9ACA00 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Counter types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="33" column="1" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="group__ptpc__interface_1ga52bc63d9211970f820d0dd438313f139" prot="public" static="no" strong="no">
        <type></type>
        <name>ptpc_capture_trigger_type</name>
        <enumvalue id="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139a31abfe662c982e882922dee873bf5f41" prot="public">
          <name>ptpc_capture_trigger_none</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139ad52ce8b9a2476fc9bb9e2f93bde7cf30" prot="public">
          <name>ptpc_capture_trigger_on_rising_edge</name>
          <initializer>= PTPC_PTPC_CTRL0_CAPT_SNAP_POS_EN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139a3f25c520f6d05660069e1350f60da698" prot="public">
          <name>ptpc_capture_trigger_on_failing_edge</name>
          <initializer>= PTPC_PTPC_CTRL0_CAPT_SNAP_NEG_EN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139af14a27070e97a39f1f309c60f09856af" prot="public">
          <name>ptpc_capture_trigger_on_both_edges</name>
          <initializer>= PTPC_PTPC_CTRL0_CAPT_SNAP_POS_EN_MASK
                                        | PTPC_PTPC_CTRL0_CAPT_SNAP_NEG_EN_MASK</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Capture trigger types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="41" column="1" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" prot="public" static="no" strong="no">
        <type></type>
        <name>ptpc_counting_mode</name>
        <enumvalue id="group__ptpc__interface_1gga48dde6b422dd02578a4320e2988b6eddaba7f18ff94d935fe2bbc03aff5b814ad" prot="public">
          <name>ptpc_counting_increment</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Increment the counter </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__ptpc__interface_1gga48dde6b422dd02578a4320e2988b6edda568b5f2cd43605cdfe74904e8dc491bb" prot="public">
          <name>ptpc_counting_decrement</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Decrement the counter </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Capture trigger types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="52" column="1" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="52" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__ptpc__interface_1gaa906d54ff55592357d29a82000551db5" prot="public" static="no">
        <type>enum <ref refid="group__ptpc__interface_1ga7e0e0af3677e005f88cd98f6d7564bb4" kindref="member">ptpc_ns_counter_rollover_type</ref></type>
        <definition>typedef enum ptpc_ns_counter_rollover_type ptpc_ns_counter_rollover_type_t</definition>
        <argsstring></argsstring>
        <name>ptpc_ns_counter_rollover_type_t</name>
        <briefdescription>
<para>Counter types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="36" column="33"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ptpc__interface_1ga82915ef8c16f5cbb5d51bdcd7201cb7d" prot="public" static="no">
        <type>enum <ref refid="group__ptpc__interface_1ga52bc63d9211970f820d0dd438313f139" kindref="member">ptpc_capture_trigger_type</ref></type>
        <definition>typedef enum ptpc_capture_trigger_type ptpc_capture_trigger_type_t</definition>
        <argsstring></argsstring>
        <name>ptpc_capture_trigger_type_t</name>
        <briefdescription>
<para>Capture trigger types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="47" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__ptpc__interface_1ga2c158b8903ba293c9e98b1be30f4a7be" prot="public" static="no">
        <type>enum <ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref></type>
        <definition>typedef enum ptpc_counting_mode ptpc_counting_mode</definition>
        <argsstring></argsstring>
        <name>ptpc_counting_mode</name>
        <briefdescription>
<para>Capture trigger types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="55" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__ptpc__interface_1ga66776d516b3fd8b4b30d455abe08b411" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_set_ns_counter_rollover</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, ptpc_ns_counter_rollover_type_t rollover)</argsstring>
        <name>ptpc_set_ns_counter_rollover</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__ptpc__interface_1gaa906d54ff55592357d29a82000551db5" kindref="member">ptpc_ns_counter_rollover_type_t</ref></type>
          <declname>rollover</declname>
        </param>
        <briefdescription>
<para>Configure ns counter rollover mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of target counter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">rollover</parametername>
</parameternamelist>
<parameterdescription>
<para>Rollover type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="79" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga5cbc461ecde7b26d414feba2a8b60190" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_enable_capture_keep</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_enable_capture_keep</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Enable capture keep. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="92" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gab746a4e91fc00fda18839355cb13d56b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_disable_capture_keep</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_disable_capture_keep</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Disable capture keep. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="103" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gab1bda66b31437e3eb6747dd178fbad77" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_set_ns_counter_update_type</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, bool coarse_update)</argsstring>
        <name>ptpc_set_ns_counter_update_type</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>coarse_update</declname>
        </param>
        <briefdescription>
<para>Update ns counter update type. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of target counter </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">coarse_update</parametername>
</parameternamelist>
<parameterdescription>
<para>Counter will be increment by 1 on </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="115" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga7c196858e8550ba9740c4fbabfec2f4c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_set_ns_counter_step</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t ns_step)</argsstring>
        <name>ptpc_set_ns_counter_step</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ns_step</declname>
        </param>
        <briefdescription>
<para>Set ns counter increment step. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ns_step</parametername>
</parameternamelist>
<parameterdescription>
<para>Increment step </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="128" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga58fc86388c075333193e5760fcbd9518" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_set_second_update</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t sec)</argsstring>
        <name>ptpc_set_second_update</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
<para>Set Second portion update value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>Second value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="140" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="140" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gab12f94c7d201249911e9f5921d3f7669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t ptpc_set_ns_update</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t ns, ptpc_counting_mode mode)</argsstring>
        <name>ptpc_set_ns_update</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Set ns portion update value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Ns value (31 bits, 0x3B9ACA00 max) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Counting mode</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_success if everything is okay </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="155" column="12" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="60" bodyend="68" declfile="drivers/inc/hpm_ptpc_drv.h" declline="155" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga89d7be66fd0e38e2e914cc985846b813" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ptpc_get_timestamp_second</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_get_timestamp_second</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get current timestamp Second portion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Seconds value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="165" column="24" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gad09a8c29a3e2e40506cab10cfe63856f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ptpc_get_timestamp_ns</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_get_timestamp_ns</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get timestamp ns portion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ns value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="178" column="24" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="178" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gadc4ac79b9d6e007d7c75861a184cd03a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_config_compare</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t sec, uint32_t ns)</argsstring>
        <name>ptpc_config_compare</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ns</declname>
        </param>
        <briefdescription>
<para>Config compare. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>Target second </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Target ns </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="191" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gafebf15e80f70413702b4354b857e7ffb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_update_timestamp_second</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t sec)</argsstring>
        <name>ptpc_update_timestamp_second</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
<para>Update Second portion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>Target second </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="205" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="205" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gab007084811f1a524ee416518906c8aeb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_update_timestamp_ns</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t ns, ptpc_counting_mode mode)</argsstring>
        <name>ptpc_update_timestamp_ns</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Update Ns portion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Target ns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Counting mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="218" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga44a1896905a1acec1a6c927f7b21764b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_enable_timer</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_enable_timer</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Enable timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="229" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gac1757c88d47c58b18063da50fdd788bd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_disable_timer</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_disable_timer</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Disable timer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="240" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="240" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gacb8e816ad39a576c94aab0f149222813" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_config_capture</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, ptpc_capture_trigger_type_t trigger)</argsstring>
        <name>ptpc_config_capture</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__ptpc__interface_1ga82915ef8c16f5cbb5d51bdcd7201cb7d" kindref="member">ptpc_capture_trigger_type_t</ref></type>
          <declname>trigger</declname>
        </param>
        <briefdescription>
<para>Config capture trigger event. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">trigger</parametername>
</parameternamelist>
<parameterdescription>
<para>Capture trigger type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="252" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="252" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gadd7cf2b41c09e429e0dbbf91e0671244" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ptpc_get_capture_ns</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_get_capture_ns</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get snapped ns value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ns portion on capture </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="267" column="24" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="267" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gaf8418c3f9f05cfcf37e886cb400e4e72" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ptpc_get_capture_second</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_get_capture_second</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Get captured second. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>second portion on capture </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="280" column="24" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="280" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gae820be6da83447360bcb8e1216301e32" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_clear_irq_status</definition>
        <argsstring>(PTPC_Type *ptr, uint32_t mask)</argsstring>
        <name>ptpc_clear_irq_status</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Clear interrupt status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be cleared </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="291" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="291" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gaf05ff7838cc688406a47697376260a8b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t ptpc_get_irq_status</definition>
        <argsstring>(PTPC_Type *ptr)</argsstring>
        <name>ptpc_get_irq_status</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Get interrupt status. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>interrupt status mask </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="303" column="24" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="303" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gafc4037ca14d6e8d8ebbf8ccc3fc10a49" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_irq_disable</definition>
        <argsstring>(PTPC_Type *ptr, uint32_t mask)</argsstring>
        <name>ptpc_irq_disable</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Disable interrupt with mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be disabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="314" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gae6ac1dbc9eccf16cd0ebf9f9b05f43e6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void ptpc_irq_enable</definition>
        <argsstring>(PTPC_Type *ptr, uint32_t mask)</argsstring>
        <name>ptpc_irq_enable</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Enable interrupt with mask. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of interrupts to be enabled </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="325" column="20" bodyfile="drivers/inc/hpm_ptpc_drv.h" bodystart="325" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga480611fd80d45a377f24576869e3caf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t ptpc_init</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, ptpc_config_t *config)</argsstring>
        <name>ptpc_init</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="structptpc__config__t" kindref="compound">ptpc_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Initialize PTPC module. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to configuration struct</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_success if everything is okay </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="339" column="12" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="23" bodyend="49" declfile="drivers/inc/hpm_ptpc_drv.h" declline="339" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gad8cde812c9774e7d6ca58f882d3c66cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t ptpc_set_timer_output</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t can_index, bool use_ptpc1)</argsstring>
        <name>ptpc_set_timer_output</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>can_index</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_ptpc1</declname>
        </param>
        <briefdescription>
<para>Set PTPC output destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">can_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target CAN instance </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">use_ptpc1</parametername>
</parameternamelist>
<parameterdescription>
<para>Use PTPC1 if set to true, otherwise PTPC0</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_success if everything is okay </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="350" column="12" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="51" bodyend="58" declfile="drivers/inc/hpm_ptpc_drv.h" declline="350" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga2baf663b8c19cb997ae748ca1ba608e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptpc_get_default_config</definition>
        <argsstring>(PTPC_Type *ptr, ptpc_config_t *config)</argsstring>
        <name>ptpc_get_default_config</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type><ref refid="structptpc__config__t" kindref="compound">ptpc_config_t</ref> *</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Get default config. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">config</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer of config struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="358" column="6" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="13" bodyend="21" declfile="drivers/inc/hpm_ptpc_drv.h" declline="358" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga682ba8d89682252d549eb4bcda9e7052" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ptpc_init_timer</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index)</argsstring>
        <name>ptpc_init_timer</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Initialize timer to count from 0. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="367" column="6" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="80" bodyend="85" declfile="drivers/inc/hpm_ptpc_drv.h" declline="367" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1ga596451689571f9717f429c15330835fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t ptpc_init_timer_with_initial</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t sec, uint32_t ns, ptpc_counting_mode mode)</argsstring>
        <name>ptpc_init_timer_with_initial</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Initialize timer with initial values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Ns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Counting mode</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_success if everything is okay </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="380" column="12" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="87" bodyend="95" declfile="drivers/inc/hpm_ptpc_drv.h" declline="380" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gabdf23a867ee51463878e4cd3ba364051" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t ptpc_update_timer</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint32_t sec, uint32_t ns, ptpc_counting_mode mode)</argsstring>
        <name>ptpc_update_timer</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>sec</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ns</declname>
        </param>
        <param>
          <type><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Update timestamp counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sec</parametername>
</parameternamelist>
<parameterdescription>
<para>Seconds </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ns</parametername>
</parameternamelist>
<parameterdescription>
<para>Ns </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Counting mode </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>status_success if everything is okay </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="392" column="12" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="70" bodyend="78" declfile="drivers/inc/hpm_ptpc_drv.h" declline="392" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__ptpc__interface_1gab2aaf2674bfd68796bdb0a7d1540e777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref></type>
        <definition>hpm_stat_t ptpc_set_pps</definition>
        <argsstring>(PTPC_Type *ptr, uint8_t index, uint8_t p)</argsstring>
        <name>ptpc_set_pps</name>
        <param>
          <type><ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Set period of pulse generated per second. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>PTPC base address </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Target index </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">p</parametername>
</parameternamelist>
<parameterdescription>
<para>(2^power Hz, from [0 - 15])</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if requested frequency can be set </para>
</simplesect>
<simplesect kind="return"><para>false if requested frequency can not be set </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="drivers/inc/hpm_ptpc_drv.h" line="404" column="12" bodyfile="drivers/src/hpm_ptpc_drv.c" bodystart="97" bodyend="117" declfile="drivers/inc/hpm_ptpc_drv.h" declline="404" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2021<sp/>HPMicro</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>BSD-3-Clause</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>HPM_PTPC_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPM_PTPC_DRV_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hpm__common_8h" kindref="compound">hpm_common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hpm_ptpc_regs.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="group__ptpc__interface_1ga3e127c5359b9fd8f4bc27bc3874867c5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTPC_EVENT_COMPARE0_MASK<sp/><sp/><sp/><sp/>PTPC_INT_STS_COMP_INT_STS0_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="group__ptpc__interface_1gac12e7df562e656d4340bc52618d723ae" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTPC_EVENT_CAPTURE0_MASK<sp/><sp/><sp/><sp/>PTPC_INT_STS_CAPTURE_INT_STS0_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="group__ptpc__interface_1ga6f953eafaff70f7886c5b1223b3a13b3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTPC_EVENT_PPS0_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTPC_INT_STS_PPS_INT_STS0_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="group__ptpc__interface_1ga6127282920eafc696bb0b25311abf2b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTPC_EVENT_COMPARE1_MASK<sp/><sp/><sp/><sp/>PTPC_INT_STS_COMP_INT_STS1_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="group__ptpc__interface_1ga508789ef654243aa4fd5e49748c8e7e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTPC_EVENT_CAPTURE1_MASK<sp/><sp/><sp/><sp/>PTPC_INT_STS_CAPTURE_INT_STS1_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="group__ptpc__interface_1ga3ded3cd5bc3e9638c70d030f5f495ab3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTPC_EVENT_PPS1_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PTPC_INT_STS_PPS_INT_STS1_MASK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="group__ptpc__interface_1ga589b1cb5b621dc251dddf8a69fadfcf9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PTPC_MAX_NS_COUNTER<sp/>(0x3B9ACA00UL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="group__ptpc__interface_1ga7e0e0af3677e005f88cd98f6d7564bb4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga7e0e0af3677e005f88cd98f6d7564bb4" kindref="member">ptpc_ns_counter_rollover_type</ref><sp/>{</highlight></codeline>
<codeline lineno="34" refid="group__ptpc__interface_1gga7e0e0af3677e005f88cd98f6d7564bb4aa8d0641dc889e50e876ef2ade7a89b0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga7e0e0af3677e005f88cd98f6d7564bb4aa8d0641dc889e50e876ef2ade7a89b0a" kindref="member">ptpc_ns_counter_rollover_binary</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="35" refid="group__ptpc__interface_1gga7e0e0af3677e005f88cd98f6d7564bb4ad59fe340696bf3e30be66640a20bf5eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga7e0e0af3677e005f88cd98f6d7564bb4ad59fe340696bf3e30be66640a20bf5eb" kindref="member">ptpc_ns_counter_rollover_digital</ref><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="36" refid="group__ptpc__interface_1gaa906d54ff55592357d29a82000551db5" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ptpc__interface_1gaa906d54ff55592357d29a82000551db5" kindref="member">ptpc_ns_counter_rollover_type_t</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group__ptpc__interface_1ga52bc63d9211970f820d0dd438313f139" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga52bc63d9211970f820d0dd438313f139" kindref="member">ptpc_capture_trigger_type</ref><sp/>{</highlight></codeline>
<codeline lineno="42" refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139a31abfe662c982e882922dee873bf5f41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139a31abfe662c982e882922dee873bf5f41" kindref="member">ptpc_capture_trigger_none</ref><sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="43" refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139ad52ce8b9a2476fc9bb9e2f93bde7cf30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139ad52ce8b9a2476fc9bb9e2f93bde7cf30" kindref="member">ptpc_capture_trigger_on_rising_edge</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a6e38f0473039f27bd551b27261b6b652" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_POS_EN_MASK</ref>,</highlight></codeline>
<codeline lineno="44" refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139a3f25c520f6d05660069e1350f60da698" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139a3f25c520f6d05660069e1350f60da698" kindref="member">ptpc_capture_trigger_on_failing_edge</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a7a55eceab59020e71551715fd2236ded" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_NEG_EN_MASK</ref>,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139af14a27070e97a39f1f309c60f09856af" kindref="member">ptpc_capture_trigger_on_both_edges</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a6e38f0473039f27bd551b27261b6b652" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_POS_EN_MASK</ref></highlight></codeline>
<codeline lineno="46" refid="group__ptpc__interface_1gga52bc63d9211970f820d0dd438313f139af14a27070e97a39f1f309c60f09856af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a7a55eceab59020e71551715fd2236ded" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_NEG_EN_MASK</ref>,</highlight></codeline>
<codeline lineno="47" refid="group__ptpc__interface_1ga82915ef8c16f5cbb5d51bdcd7201cb7d" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ptpc__interface_1ga82915ef8c16f5cbb5d51bdcd7201cb7d" kindref="member">ptpc_capture_trigger_type_t</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref><sp/>{</highlight></codeline>
<codeline lineno="53" refid="group__ptpc__interface_1gga48dde6b422dd02578a4320e2988b6eddaba7f18ff94d935fe2bbc03aff5b814ad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga48dde6b422dd02578a4320e2988b6eddaba7f18ff94d935fe2bbc03aff5b814ad" kindref="member">ptpc_counting_increment</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54" refid="group__ptpc__interface_1gga48dde6b422dd02578a4320e2988b6edda568b5f2cd43605cdfe74904e8dc491bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gga48dde6b422dd02578a4320e2988b6edda568b5f2cd43605cdfe74904e8dc491bb" kindref="member">ptpc_counting_decrement</ref><sp/>=<sp/>1,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="group__ptpc__interface_1ga2c158b8903ba293c9e98b1be30f4a7be" refkind="member"><highlight class="normal">}<sp/><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structptpc__config__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61" refid="structptpc__config__t_1a87281931f4c7f18708c700bcf26940f9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1ga82915ef8c16f5cbb5d51bdcd7201cb7d" kindref="member">ptpc_capture_trigger_type_t</ref><sp/><ref refid="structptpc__config__t_1a87281931f4c7f18708c700bcf26940f9" kindref="member">capture_trigger</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="structptpc__config__t_1aa4c6073b9049b6e94cbec80b65c0a2db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gaa906d54ff55592357d29a82000551db5" kindref="member">ptpc_ns_counter_rollover_type_t</ref><sp/><ref refid="structptpc__config__t_1aa4c6073b9049b6e94cbec80b65c0a2db" kindref="member">ns_rollover_mode</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63" refid="structptpc__config__t_1a128f22d6ea73a891baa011e877f161b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structptpc__config__t_1a128f22d6ea73a891baa011e877f161b6" kindref="member">coarse_increment</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="structptpc__config__t_1a267ca418e4bcf051055b9e2b5a11b0c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structptpc__config__t_1a267ca418e4bcf051055b9e2b5a11b0c4" kindref="member">capture_keep</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="structptpc__config__t_1a341cefa03b4fa06e3953033e49162621" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structptpc__config__t_1a341cefa03b4fa06e3953033e49162621" kindref="member">src_frequency</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}<sp/><ref refid="structptpc__config__t" kindref="compound">ptpc_config_t</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="group__ptpc__interface_1ga66776d516b3fd8b4b30d455abe08b411" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga66776d516b3fd8b4b30d455abe08b411" kindref="member">ptpc_set_ns_counter_rollover</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1gaa906d54ff55592357d29a82000551db5" kindref="member">ptpc_ns_counter_rollover_type_t</ref><sp/>rollover)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>=<sp/>(ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>&amp;<sp/>~<ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a86e568124cb3398312b9d7df50f3ddae" kindref="member">PTPC_PTPC_CTRL0_SUBSEC_DIGITAL_ROLLOVER_MASK</ref>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1ac306dd867060a505c08d105a970c2273" kindref="member">PTPC_PTPC_CTRL0_SUBSEC_DIGITAL_ROLLOVER_SET</ref>(rollover);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="group__ptpc__interface_1ga5cbc461ecde7b26d414feba2a8b60190" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga5cbc461ecde7b26d414feba2a8b60190" kindref="member">ptpc_enable_capture_keep</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>|=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1add57a522ab22bd2a18572cdd2bf63c31" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_KEEP_MASK</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="group__ptpc__interface_1gab746a4e91fc00fda18839355cb13d56b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gab746a4e91fc00fda18839355cb13d56b" kindref="member">ptpc_disable_capture_keep</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>&amp;=<sp/>~<ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1add57a522ab22bd2a18572cdd2bf63c31" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_KEEP_MASK</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="group__ptpc__interface_1gab1bda66b31437e3eb6747dd178fbad77" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gab1bda66b31437e3eb6747dd178fbad77" kindref="member">ptpc_set_ns_counter_update_type</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>coarse_update)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>=<sp/>(ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>&amp;<sp/>~<ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a3e976accd405e906359b3edebbed3948" kindref="member">PTPC_PTPC_CTRL0_FINE_COARSE_SEL_MASK</ref>)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1acc6e8b7a1a816e72e3a9460acc0def61" kindref="member">PTPC_PTPC_CTRL0_FINE_COARSE_SEL_SET</ref>(coarse_update);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group__ptpc__interface_1ga7c196858e8550ba9740c4fbabfec2f4c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga7c196858e8550ba9740c4fbabfec2f4c" kindref="member">ptpc_set_ns_counter_step</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>ns_step)</highlight></codeline>
<codeline lineno="129"><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a7f57bcafd62ba39e411a16cf6297c8c2" kindref="member">CTRL1</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a943e48bf2c600feb0d83b313abab4469" kindref="member">PTPC_PTPC_CTRL1_SS_INCR_SET</ref>(ns_step);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__ptpc__interface_1ga58fc86388c075333193e5760fcbd9518" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga58fc86388c075333193e5760fcbd9518" kindref="member">ptpc_set_second_update</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>sec)</highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1ae457c7c673faad5ebdf35248995ba80f" kindref="member">TS_UPDTH</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a35d7f3bb762f647a2646b13ab2712f07" kindref="member">PTPC_PTPC_TS_UPDTH_SEC_UPDATE_SET</ref>(sec);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__ptpc__interface_1gab12f94c7d201249911e9f5921d3f7669" kindref="member">ptpc_set_ns_update</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>ns,<sp/><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref><sp/>mode);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="group__ptpc__interface_1ga89d7be66fd0e38e2e914cc985846b813" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ptpc__interface_1ga89d7be66fd0e38e2e914cc985846b813" kindref="member">ptpc_get_timestamp_second</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a3a0364f0dfad973ce4aac16c275c1a64" kindref="member">PTPC_PTPC_TIMEH_TIMESTAMP_HIGH_GET</ref>(ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a7997bb86ccbcf81ea0ebad62fefa709b" kindref="member">TIMEH</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="group__ptpc__interface_1gad09a8c29a3e2e40506cab10cfe63856f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ptpc__interface_1gad09a8c29a3e2e40506cab10cfe63856f" kindref="member">ptpc_get_timestamp_ns</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a4d2454381f5f42912f2839784f175367" kindref="member">PTPC_PTPC_TIMEL_TIMESTAMP_LOW_GET</ref>(ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a26887db29cdb360dd6cbac7cff7f2401" kindref="member">TIMEL</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="group__ptpc__interface_1gadc4ac79b9d6e007d7c75861a184cd03a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gadc4ac79b9d6e007d7c75861a184cd03a" kindref="member">ptpc_config_compare</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>sec,<sp/>uint32_t<sp/>ns)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a6942df1fdc5bbc472c71271189313252" kindref="member">TARH</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1ab79c42f00bbea8f06095533d2899f617" kindref="member">PTPC_PTPC_TARH_TARGET_TIME_HIGH_SET</ref>(sec);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a6f91130ee4c89343a6726843110145af" kindref="member">TARL</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1af8857ecbf83b0781b35a179e7683d90f" kindref="member">PTPC_PTPC_TARL_TARGET_TIME_LOW_SET</ref>(ns);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>|=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a33710481eb26dd2aad175bcd8130a461" kindref="member">PTPC_PTPC_CTRL0_COMP_EN_MASK</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="group__ptpc__interface_1gafebf15e80f70413702b4354b857e7ffb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gafebf15e80f70413702b4354b857e7ffb" kindref="member">ptpc_update_timestamp_second</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>sec)</highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1ae457c7c673faad5ebdf35248995ba80f" kindref="member">TS_UPDTH</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a35d7f3bb762f647a2646b13ab2712f07" kindref="member">PTPC_PTPC_TS_UPDTH_SEC_UPDATE_SET</ref>(sec);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="group__ptpc__interface_1gab007084811f1a524ee416518906c8aeb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gab007084811f1a524ee416518906c8aeb" kindref="member">ptpc_update_timestamp_ns</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>ns,<sp/><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref><sp/>mode)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1aa230a858a95f2bac6b85baee1fe582ba" kindref="member">TS_UPDTL</ref><sp/>=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1acd653952446068f3908dc6505f3e1bf5" kindref="member">PTPC_PTPC_TS_UPDTL_NS_UPDATE_SET</ref>(ns)<sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a28c7a1b8e76575c961568c3fa5f7ec32" kindref="member">PTPC_PTPC_TS_UPDTL_ADD_SUB_SET</ref>(mode);</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="group__ptpc__interface_1ga44a1896905a1acec1a6c927f7b21764b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga44a1896905a1acec1a6c927f7b21764b" kindref="member">ptpc_enable_timer</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>|=<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1adc04e19dc820a45e1435aae02cbe2a5d" kindref="member">PTPC_PTPC_CTRL0_TIMER_ENABLE_MASK</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="group__ptpc__interface_1gac1757c88d47c58b18063da50fdd788bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gac1757c88d47c58b18063da50fdd788bd" kindref="member">ptpc_disable_timer</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>&amp;=<sp/>~<ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1adc04e19dc820a45e1435aae02cbe2a5d" kindref="member">PTPC_PTPC_CTRL0_TIMER_ENABLE_MASK</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="group__ptpc__interface_1gacb8e816ad39a576c94aab0f149222813" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gacb8e816ad39a576c94aab0f149222813" kindref="member">ptpc_config_capture</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__ptpc__interface_1ga82915ef8c16f5cbb5d51bdcd7201cb7d" kindref="member">ptpc_capture_trigger_type_t</ref><sp/>trigger)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>=<sp/>(ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a46f496d83afe9fc8a0444151b4d616a1" kindref="member">CTRL0</ref><sp/>&amp;<sp/>~(<ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a6e38f0473039f27bd551b27261b6b652" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_POS_EN_MASK</ref></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a7a55eceab59020e71551715fd2236ded" kindref="member">PTPC_PTPC_CTRL0_CAPT_SNAP_NEG_EN_MASK</ref>))<sp/>|<sp/>trigger;</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="group__ptpc__interface_1gadd7cf2b41c09e429e0dbbf91e0671244" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ptpc__interface_1gadd7cf2b41c09e429e0dbbf91e0671244" kindref="member">ptpc_get_capture_ns</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="268"><highlight class="normal">{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a689cb82cfa9ef4a3ee480a58f9077feb" kindref="member">PTPC_PTPC_CAPT_SNAPL_CAPT_SNAP_LOW_GET</ref>(ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a3fbc3b69cc220dba2d37d0042dda177d" kindref="member">CAPT_SNAPL</ref>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="group__ptpc__interface_1gaf8418c3f9f05cfcf37e886cb400e4e72" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ptpc__interface_1gaf8418c3f9f05cfcf37e886cb400e4e72" kindref="member">ptpc_get_capture_second</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="HPM5300_2ip_2hpm__ptpc__regs_8h_1a2cff7013c4bffdcc73730a7347cd823f" kindref="member">PTPC_PTPC_CAPT_SNAPH_CAPT_SNAP_HIGH_GET</ref>(ptr-&gt;<ref refid="structPTPC__Type_1af37c1585493d5eeefe0f8b1a0f4533a3" kindref="member">PTPC</ref>[index].<ref refid="structPTPC__Type_1a1ff430bd9247729dcb29275167bd3a00" kindref="member">CAPT_SNAPH</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="group__ptpc__interface_1gae820be6da83447360bcb8e1216301e32" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gae820be6da83447360bcb8e1216301e32" kindref="member">ptpc_clear_irq_status</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1abdfa9a6c49a8107bfe5eeba4b6b8b0a8" kindref="member">INT_STS</ref><sp/>=<sp/>mask;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="group__ptpc__interface_1gaf05ff7838cc688406a47697376260a8b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="group__ptpc__interface_1gaf05ff7838cc688406a47697376260a8b" kindref="member">ptpc_get_irq_status</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr-&gt;<ref refid="structPTPC__Type_1abdfa9a6c49a8107bfe5eeba4b6b8b0a8" kindref="member">INT_STS</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="group__ptpc__interface_1gafc4037ca14d6e8d8ebbf8ccc3fc10a49" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gafc4037ca14d6e8d8ebbf8ccc3fc10a49" kindref="member">ptpc_irq_disable</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1a917333ee5167fcfb4a306ecd6c11d16e" kindref="member">INT_EN</ref><sp/>&amp;=<sp/>~mask;</highlight></codeline>
<codeline lineno="317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="group__ptpc__interface_1gae6ac1dbc9eccf16cd0ebf9f9b05f43e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1gae6ac1dbc9eccf16cd0ebf9f9b05f43e6" kindref="member">ptpc_irq_enable</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint32_t<sp/>mask)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr-&gt;<ref refid="structPTPC__Type_1a917333ee5167fcfb4a306ecd6c11d16e" kindref="member">INT_EN</ref><sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__ptpc__interface_1ga480611fd80d45a377f24576869e3caf6" kindref="member">ptpc_init</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/><ref refid="structptpc__config__t" kindref="compound">ptpc_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__ptpc__interface_1gad8cde812c9774e7d6ca58f882d3c66cc" kindref="member">ptpc_set_timer_output</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>can_index,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_ptpc1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga2baf663b8c19cb997ae748ca1ba608e4" kindref="member">ptpc_get_default_config</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/><ref refid="structptpc__config__t" kindref="compound">ptpc_config_t</ref><sp/>*config);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__ptpc__interface_1ga682ba8d89682252d549eb4bcda9e7052" kindref="member">ptpc_init_timer</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__ptpc__interface_1ga596451689571f9717f429c15330835fd" kindref="member">ptpc_init_timer_with_initial</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>sec,<sp/>uint32_t<sp/>ns,<sp/><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref><sp/>mode);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__ptpc__interface_1gabdf23a867ee51463878e4cd3ba364051" kindref="member">ptpc_update_timer</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint32_t<sp/>sec,<sp/>uint32_t<sp/>ns,<sp/><ref refid="group__ptpc__interface_1ga48dde6b422dd02578a4320e2988b6edd" kindref="member">ptpc_counting_mode</ref><sp/>mode);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="group__common__interface_1ga087efae82a4b174a0363363d9d5ece19" kindref="member">hpm_stat_t</ref><sp/><ref refid="group__ptpc__interface_1gab2aaf2674bfd68796bdb0a7d1540e777" kindref="member">ptpc_set_pps</ref>(<ref refid="structPTPC__Type" kindref="compound">PTPC_Type</ref><sp/>*ptr,<sp/>uint8_t<sp/>index,<sp/>uint8_t<sp/>p);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>HPM_PTPC_DRV_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="drivers/inc/hpm_ptpc_drv.h"/>
  </compounddef>
</doxygen>
